from Marvell.PyMIBS.PyMIBS import PyMIBSProvider

IP1 = "10.5.217.207:23"
IP2= "10.4.50.3:23"

IP_I2C = "10.5.217.195:23"
IP_CMIS = "10.5.217.7:23"

def debug_i2c():
    prov: PyMIBSProvider = PyMIBSProvider()
    prov.setLog(1)
    prov.Connect(IP2)
    #prov.SetI2CConfigParams(0x5498)
    data = prov.I2C_Read(0x70,0,0,1)
    print(data)
    rc = prov.I2C_Write(0x70,0,0,[data[0] + 1], 1)
    print(rc)
    data = prov.I2C_Read(0x70,0,0,1)
    print(data)


def debug_cmis():
    mibs = PyMIBSProvider()


    rc = mibs.Connect(IP_CMIS)
    # # mibs.setLog(1)
    print("connect", rc)
    slaves = mibs.I2C_Scan(0)
    print("slaves:", [hex(s) for s in slaves])

    data = mibs.I2C_Read(0, "0x50", 10)
    print("read:", [hex(s) for s in data])

    data2write = [data[0] + 0x1]
    rc = mibs.I2C_Write_Read(0, "0x50", "0x02", 1)
    print(f"write and read data={[hex(s) for s in data2write]}:", rc)

    data = mibs.I2C_Write(0, "0x50", "0x02 0x03 0x04")
    print("write:", data)


    rc = mibs.Connect(IP_CMIS)
    # mibs.setLog(1)
    print("connect", rc)
    data = mibs.cmis_get_vendor_name(0, "AC5P")
    print("cmis_get_vendor_name:", data)

    data = mibs.cmis_get_temperature(0, "AC5P")
    print("cmis_get_temperature:", data)

    data = mibs.cmis_get_rx_cdr_lol(0, "AC5P")
    print("cmis_get_rx_cdr_lol:", data)

    data = mibs.cmis_get_tx_disable(0, "AC5P")
    print("cmis_get_tx_disable:", data)

    data = mibs.cmis_set_tx_disable(0, 0, 1, "AC5P")
    print("cmis_set_tx_disable:", data)

    data = mibs.cmis_get_tx_fir(0, 0, "AC5P")
    print("cmis_get_tx_fir:", data)

    data = mibs.cmis_set_tx_fir(0, 0, "0x1", "0x2", "0x3", "AC5P")
    print("cmis_set_tx_fir:", data)

    data = mibs.cmis_get_register(0, "0x10", 0, 130, "AC5P")
    print("cmis_get_register:", data)

    data = mibs.cmis_set_register(0, "0x10", 0, 130, "0x0", "AC5P")
    print("cmis_set_register:", data)



    # tmp = mibs.cmis_get_loopback_capabilities(0, "AC5P")
    # tmp = mibs.cmis_set_loopback(0, 0, "TX2RX", "AC5P")
    # tmp = mibs.cmis_get_diagnostics_capabilities(0, "AC5P")
    # tmp = mibs.cmis_set_diagnostics(0, 7, 1, "AC5P")

    # tmp = mibs.Read_all_temperature_sensors()
    # tmp = mibs.Read_specific_temperature_sensor(1)

    # tmp = mibs.Read_FAN_error_status_register()
    # tmp = mibs.Read_FAN_control_status_register()
    # tmp = mibs.Read_FAN_speed_all()
    # tmp = mibs.Read_FAN_speed_specific(1)
    # tmp = mibs.Write_FAN_speed_specific(1, "0x0A")
    # tmp = mibs.Write_FAN_speed_multiple("0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11")

    # tmp = mibs.Read_FPGA_register_offset("0x20")
    # tmp = mibs.Write_FPGA_register_offset("0x20", "0x0A")

    # tmp = mibs.EMsetVDD(0, 800.0, 1, "TL10", "TL10")
    # tmp = mibs.EMgetVDD(0, 1, "TL10", "TL10")
    # tmp = mibs.EMgetIDD(0, 1, "TL10", "TL10")

def debug_mibs_login(ip,user,password):
    mibs = PyMIBSProvider()
    mibs.setLog(1)
    # rc = mibs.Connect(ip,user, password)
    mibs.Connect(f"{ip},{user},{password}")
    scan_l = mibs.I2C_Scan()
    print(scan_l)
    data = mibs.I2C_Read(0x70, 0, 0, 1)
    print(data)

    print("done")

if __name__ == "__main__":
   # debug_mibs_login("10.4.53.11:23","root", "Innovium123")
   debug_mibs_login("10.4.65.184:23","root", "Innovium123")

