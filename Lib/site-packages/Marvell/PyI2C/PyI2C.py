from enum import Enum

try:
    from Marvell.PyMIBS.PyMIBS import PyMIBSProvider
    from Marvell.PySub20.PySub20 import PySub20Provider
except Exception as e:
    from Marvell.PyI2C.Common.ImportExternal import import_external

    import_external('PyMIBS')
    import_external('PySub20')

    from Marvell.PyMIBS.PyMIBS import PyMIBSProvider
    from Marvell.PySub20.PySub20 import PySub20Provider


class I2CProviderType(Enum):
    SUB20 = 1
    MIBS = 2


class ProviderFactory:

    @staticmethod
    def create(provider_type: I2CProviderType):
        if provider_type == I2CProviderType.SUB20:
            return PySub20Provider()

        if provider_type == I2CProviderType.MIBS:
            return PyMIBSProvider()


def check_Provider(func):
    def inner(*args, **kwargs):
        if args[0]._provider == None:
            raise Exception("The I2C provider is not initialized.")
        return func(*args, **kwargs)

    return inner


class PyI2CInterface(object):

    def __init__(self):
        self._provider = None
        self.provider_type = None
        #self.Init(1)
    def Init(self, provider_type_name: int):
        try:
            self.provider_type = I2CProviderType(provider_type_name)
        except:
            raise Exception(f"Invalid provider type index [{provider_type_name}]")

        self._provider = ProviderFactory.create(self.provider_type)

    @check_Provider
    def SetLog(self, logLevel: int):
        self._provider.setLog(logLevel)

    @check_Provider
    def Connect(self, key):
        """

        @param key:
        @return: On success function returns True. Otherwise Exception will be raised.
        """

        return self._provider.Connect(key)

    @check_Provider
    def Disconnect(self):
        """

        @return: On success function returns None. Otherwise Exception will be raised.
        """
        return self._provider.Disconnect()

    @check_Provider
    def I2C_Read(self, slaveAddr, memAddr, memAddrSz, size):
        """
        Note: If memAddrSz is zero "Memory Address Write" stage will be skipped.

        @param slaveAddr: Slave Address
        @param memAddr:  Memory Address. Will be shifted out in "Memory Address Write" stage MSB first
        @param memAddrSz: Memory Address size bytes
        @param size:  Read data size bytes.
        @return: Buffer read data if success. Otherwise Exception will be raised.
        """
        return self._provider.I2C_Read(slaveAddr, memAddr, memAddrSz, size)

    @check_Provider
    def I2C_Write(self, slaveAddr, memAddr, memAddrSz, buffer, size):
        """
        Note: If memAddrSz is zero "Memory Address Write" stage will be skipped.

        @param slaveAddr: Slave Address
        @param memAddr:  Memory Address. Will be shifted out in "Memory Address Write" stage MSB first
        @param memAddrSz: Memory Address size bytes
        @param buffer: Buffer for data to be written (Array of data)
        @param size:  Write data size bytes.

        @return: On success function returns True. Otherwise Exception will be raised.
        """
        return self._provider.I2C_Write(slaveAddr, memAddr, memAddrSz, buffer, size)

    @check_Provider
    def I2C_Scan(self):
        """

        @return: On success function returns list of slave device addresses . Otherwise Exception will be raised.
        """
        return self._provider.I2C_Scan()

    @check_Provider
    def Execute(self, function_name, *parameters):
        method = getattr(self._provider, function_name, None)

        if callable(method):
            return method(*parameters)

        raise Exception(f"Function {function_name} not provider by {str(self.provider_type)} provider")
