from builtins import str
from builtins import object
from ..PyBaseLayer.serialComm import *
from ..PyBaseLayer.telnetComm import *
from ..PyBaseLayer.telnetCommOrigin import *
from ..PyBaseLayer.sshComm import *
from ..Common.Types import *
from ..CommunicationUtilitiesLayer.CommunicationUtilities import *
import uuid

# === Python Communication  Chanel Factory ===

class ChannelFactory(object):
    """Factory to create python communication channel , PySerial/PyTelnet channel"""

    @staticmethod
    def Create(commType, port, ipAddr, prompt,uname, password, baudRate, delayBetweenCharsWrite=-1, **extraParameters):

        # if port is not None and isinstance(port, str):
        #     port = port.encode('utf-8')

        # if ipAddr is not None and isinstance(ipAddr, str):
        #     ipAddr = ipAddr.encode('utf-8')
        #
        # if uname is not None and isinstance(uname, str):
        #     uname = uname.encode('utf-8')

        if commType.value == CommunicationType.PySerial.value:
            if type(port) == int:
                com_port = "COM" + str(port)
            else:
                com_port = port
            #if CommunicatioUtilities.is_linux():
            #    com_port = port.decode() if isinstance(port,bytes) else str(port)
            return com_port, serialComm(com_port, prompt, baudRate, delayBetweenCharsWrite=delayBetweenCharsWrite)

        if commType.value == CommunicationType.PyTelnet.value:
            if extraParameters.get("uid") and extraParameters["uid"]:
                aliasipAddr = str(ipAddr) + ":" + str(port) + ":" + str(uuid.uuid4())
            else:
                aliasipAddr = str(ipAddr) + ":" + str(port)
            return aliasipAddr, telnetComm(ipAddr, port, uname=uname, password=password, **extraParameters)

        if commType.value == CommunicationType.PyTelnetOriginLib.value:
            if extraParameters.get("uid") and extraParameters["uid"]:
                aliasipAddr = str(ipAddr) + ":" + str(port) + ":" + str(uuid.uuid4())
            else:
                aliasipAddr = str(ipAddr) + ":" + str(port)
            return aliasipAddr, telnetCommOrigin(ipAddr, port, uname=uname, password=password, **extraParameters)
        if commType.value == CommunicationType.PySSH.value:
            if isinstance(uname, bytes):
                uname = uname.decode('utf-8')
            if extraParameters.get("uid") and extraParameters["uid"]:
                aliasipAddr = str(ipAddr) + ":" + uname + ":" + str(port) + ":" + str(uuid.uuid4())
            else:
                aliasipAddr = str(ipAddr) + ":" + uname + ":" + str(port)
            return aliasipAddr, sshComm(host=ipAddr, port=port, username=uname, password=password, **extraParameters)


