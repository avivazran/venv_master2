from __future__ import print_function
# Leave this import we need it for other packages
from builtins import str
from Marvell.pytoolsinfra.PythonLoggerInfra.LoggerManager.LoggerDecartor import LogWith, Log_all_class_methods
from Marvell.pytoolsinfra.PythonLoggerInfra import LoggerManager
from Marvell.pytoolsinfra.ConfigurationModule.Configurator.ConfigurationManager.ConfigManager import ConfigManager
import os
import sys

tmpLogger = None
configData = None
console_only_logger = True

def initLogger():
    global tmpLogger
    if configData.configuration.need_logging:
        if tmpLogger is None:
            l_configData = GetConfigData()
            tmpLogger = LoggerManager.GetLogger(l_configData.configuration.module_name,
                                                GetFullPath(l_configData.configuration.logPath),
                                                l_configData.configuration.logName,
                                                console_only_logger=console_only_logger)
            tmpLogger.setLoggingLevel(LoggerManager.logginglevelNames[l_configData.configuration.logging_level])
    return tmpLogger


if getattr(sys, 'frozen', False):
    # we are running in a bundle
    base_path = sys._MEIPASS + '/config'
else:
    # we are running in a normal Python environment
    base_path = os.path.dirname(os.path.abspath(__file__))


def GetFullPath(path):
    # type: (str) -> str
    config_data = GetConfigData()

    print("config data is: {}".format(str(config_data)))

    if config_data is None:
        return path
    base_dir = "c:\\ToolsInfraLogs\\" + config_data.configuration.module_name if base_path.startswith("\\\\") \
        else base_path
    if path.startswith('.'):
        return base_dir + path[1:]
    else:
        return path


def GetConfigData():
    global configData
    if configData is None:
        configData = ConfigManager().read_config_file(os.path.join(base_path, "CommWrapperConfig.yaml"))
    return configData


GetConfigData()
show_func_parameters = configData.configuration.show_func_parameters
CommWrapper_logger = initLogger()

