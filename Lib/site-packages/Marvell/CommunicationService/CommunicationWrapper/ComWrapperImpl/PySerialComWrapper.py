from __future__ import absolute_import
from builtins import str
from Marvell.CommunicationService.Common.Types import CommunicationType as ComTypes
from Marvell.CommunicationService.HighCommunicationLayer.CommunicationManagement import CommunicationManagement

from .PyComWrapper import PyBaseComWrapper
from Marvell.CommunicationService.CommunicationWrapper import *
from Marvell.CommunicationService.CommunicationUtilitiesLayer.CommunicationUtilities import *
logger = CommWrapper_logger


class PySerialComWrapper(PyBaseComWrapper):
    
    def __init__(self, connectionData, connAlias="", shellPrompt=None, userPrompt=None, passPrompt=None):
        super(self.__class__, self).__init__(connAlias,connectionData, shellPrompt, userPrompt, passPrompt)
        self._port = connectionData.com_number.value
        if isinstance(self._port,(int,float)) or isinstance(self._port,str) and self._port.isdigit():
            self._port = int(float(self._port))
        self._baudrate = connectionData.baudrate.value
        # self._timeout = connectionData.timeout
        # self._prompt = connectionData.prompt
        self._commType = ComTypes.PySerial

    def Connect(self):
        # type: () -> bool
        res = None
        self.LogToTestLogger(f"Connecting to {'' if  CommunicatioUtilities.is_linux() else 'COM'}{self._port}...",force_format=True)
        self.connAlias = CommunicationManagement.Connect(self._commType, self._port)#, prompt=self._prompt)
        if self.connAlias is not None:
            res = True
            if self.login_after_connect:
                res = self.Login()
            if res:
                self.LogToTestLogger("Connection Successful",force_format=True)
        else:
            self.LogToTestLogger("Failed to Connect to COM" + str(self._port) + "...",force_format=True)
            res = False
        return res


# PySerialComWrapper = Log_all_class_methods(PySerialComWrapper, logger, show_func_parameters)