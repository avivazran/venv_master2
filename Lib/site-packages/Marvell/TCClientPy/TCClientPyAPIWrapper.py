from __future__ import absolute_import
from builtins import object
from Marvell.TCClientPy.src.TCClientFactory import *


class check_api(object):
    def __init__(self, api_name):
        self.api_name = api_name

    def __call__(self, func):
        def inner(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                raise Exception(self.api_name + ": " + str(e))
        return inner


class TCClientPyAPIWrapper(object):
    m_tc = None

    def __init__(self):
        try:
            if TCClientPyAPIWrapper.m_tc is None:
                TCClientPyAPIWrapper.m_tc = TCClientFactory.getTCInstance()
        except Exception as e:
            raise Exception("__init__: " + str(e))


    ### Flex/MaxTC ###

    @staticmethod
    @check_api("ConnectToFlexTC")
    def ConnectToFlexTC(deviceID, IP):
        """
        Connect to Flex TC.
        TC_API  TCConnectToFlexTC(unsigned long deviceID, BSTR IP);

        :param deviceID:unsigned long
        :param IP:BSTR
        :return:
        """
        TCClientPyAPIWrapper.m_tc.ConnectToFlexTC(deviceID, IP)

    @staticmethod
    @check_api("DisconnectFromFlexTC")
    def DisconnectFromFlexTC():
        """
        Disconnect from Flex TC
        TC_API  TCDisconnectFromFlexTC();

        :return:
        """
        TCClientPyAPIWrapper.m_tc.DisconnectFromFlexTC()

    @staticmethod
    @check_api("TempControlReadFlexTCTemperature")
    def TempControlReadFlexTCTemperature(DevId):
        Temp = TCClientPyAPIWrapper.m_tc.TempControlReadFlexTCTemperature(DevId)
        return locals().copy()

    @staticmethod
    @check_api("TempControlGetFlexTCSetpoint")
    def TempControlGetFlexTCSetpoint():
        Setpoint = TCClientPyAPIWrapper.m_tc.TempControlGetFlexTCSetpoint()
        return locals().copy()

    @staticmethod
    @check_api("TempControlSetFlexTCTemperature")
    def TempControlSetFlexTCTemperature(DevId, Temp, RampTime):
        TCClientPyAPIWrapper.m_tc.TempControlSetFlexTCTemperature(DevId, Temp, RampTime)

    @staticmethod
    @check_api("TempControlSetFlexTCPower")
    def TempControlSetFlexTCPower(Action):
        TCClientPyAPIWrapper.m_tc.TempControlSetFlexTCPower(Action)

    @staticmethod
    @check_api("TempControlGetFlexTCPower")
    def TempControlGetFlexTCPower():
        PowerStatus = TCClientPyAPIWrapper.m_tc.TempControlGetFlexTCPower()
        return locals().copy()

    @staticmethod
    @check_api("TempControlWaitFlexTCTemperature")
    def TempControlWaitFlexTCTemperature(DevId, Temp, TempDeviation, StableSamples, WaitTimeout):
        TCClientPyAPIWrapper.m_tc.TempControlWaitFlexTCTemperature(DevId, Temp, TempDeviation, StableSamples, WaitTimeout)

    ### Oven ###

    @staticmethod
    @check_api("ConnectToOven")
    def ConnectToOven(deviceID, IP, portNum, ovenType = None):
        """
        Connect to Oven Device.
        TC_API  TCConnectToOven(unsigned long deviceID, BSTR IP, unsigned long	portNum);

        :param deviceID: unsigned long
        :param IP:BSTR
        :param portNum: unsigned long
        :return:
        """
        TCClientPyAPIWrapper.m_tc.ConnectToOven(deviceID, IP, portNum, ovenType)

    @staticmethod
    @check_api("DisconnectFromOven")
    def DisconnectFromOven():
        """
        Disconnect from Oven.
        TC_API  TCDisconnectFromOven(void);

        :return:
        """
        TCClientPyAPIWrapper.m_tc.DisconnectFromOven()

    @staticmethod
    @check_api("TempControlReadOvenTemperature")
    def TempControlReadOvenTemperature(DevId):
        Temp = TCClientPyAPIWrapper.m_tc.TempControlReadOvenTemperature(DevId)
        return locals().copy()

    @staticmethod
    @check_api("TempControlGetOvenSetpoint")
    def TempControlGetOvenSetpoint():
        Setpoint = TCClientPyAPIWrapper.m_tc.TempControlGetOvenSetpoint()
        return locals().copy()

    @staticmethod
    @check_api("TempControlSetOvenTemperature")
    def TempControlSetOvenTemperature(DevId, Temp, RampTime):
        TCClientPyAPIWrapper.m_tc.TempControlSetOvenTemperature(DevId, Temp, RampTime)

    @staticmethod
    @check_api("TempControlGetOvenPowerMode")
    def TempControlGetOvenPowerMode():
        PowerMode = TCClientPyAPIWrapper.m_tc.TempControlGetOvenPowerMode()
        return locals().copy()

    @staticmethod
    @check_api("TempControlSetOvenPower")
    def TempControlSetOvenPower(Action):
        TCClientPyAPIWrapper.m_tc.TempControlSetOvenPower(Action)

    @staticmethod
    @check_api("TempControlWaitOvenTemperature")
    def TempControlWaitOvenTemperature(DevId, Temp, TempDeviation, StableSamples, WaitTimeout):
        TCClientPyAPIWrapper.m_tc.TempControlWaitOvenTemperature(DevId, Temp, TempDeviation, StableSamples, WaitTimeout)


    ### Legacy - Deprecated ###

    @staticmethod
    @check_api("TempControlDevMapSet")
    def TempControlDevMapSet(DevId, DevType):
        """
        Map Temperature Control Device to logic Device Id
        TC_API  TCTempControlDevMapSet(unsigned long DevId, TempDevTypeEnum DevType);

        :param DevId: unsigned long - logic device id
        :param DevType: TempDevTypeEnum - Temperature Control Device
        :return:
        """
        TCClientPyAPIWrapper.m_tc.TempControlDevMapSet(DevId, DevType)

    @staticmethod
    @check_api("TempControlDevMapGetNext")
    def TempControlDevMapGetNext(DevId):
        """
        Get mapping of logic Device Ids to Temperature Control Device.
        If DevId = 0 the function returns the first mapped device.
        The consecutive calls for this function with value of DevId returned by
        previous call return mapped device Ids in increasing order. When there is
        no yet mapped devices the GT_NO_MORE status returned.

        TC_API  TCTempControlDevMapGetNext(unsigned long *DevId, TempDevTypeEnum *DevType);

        :param DevId: unsigned long *
        :param DevType:TempDevTypeEnum *DevType
        :return: {"DevId": value, "DevType": value}

        """
        res = TCClientPyAPIWrapper.m_tc.TempControlDevMapGetNext(DevId)
        res['DevType'] = res['DevType'].value  # return enum's value
        return res

    @staticmethod
    @check_api("TempControlDevMapDelete")
    def TempControlDevMapDelete(DevId):
        """

        Delete Temperature Control Device from mapping.
        The device should be previously disconnected.
        TC_API  TCTempControlDevMapDelete(unsigned long	DevId);

        :param DevId:unsigned long
        :return:
        """
        TCClientPyAPIWrapper.m_tc.TempControlDevMapDelete(DevId)

    @staticmethod
    @check_api("TempControlReadTemperature")
    def TempControlReadTemperature(DevId):
        """
        Read the current temperature of Temperature Control Device.
        TC_API  TCTempControlReadTemperature(unsigned long	DevId, unsigned long	*Temp);

        :param DevId:unsigned long
        :param Temp:unsigned long	*
        :return:
        """
        Temp = TCClientPyAPIWrapper.m_tc.TempControlReadTemperature(DevId)
        return locals().copy()

    @staticmethod
    @check_api("TempControlSetTemperature")
    def TempControlSetTemperature(DevId, Temp, RampTime):
        """
        Algo for Set Ramp time and write temperature, work only for FlexTc/MaxTc
        TC_API  TCTempControlSetTemperature(unsigned long	DevId, unsigned long	Temp,unsigned long	RampTime,);

        :param DevId:unsigned long
        :param Temp:unsigned long
        :param RampTime:unsigned long

        :return:
        """
        TCClientPyAPIWrapper.m_tc.TempControlSetTemperature(DevId, Temp, RampTime)


    ### Unsupported ###

    @staticmethod
    @check_api("SetTempControlProfileSet")
    def SetTempControlProfileSet(DevId, Index, Temp, RampTime, SoakTime, JumpOp):
        TCClientPyAPIWrapper.m_tc.SetTempControlProfileSet(DevId, Index, Temp, RampTime, SoakTime, JumpOp)

    @staticmethod
    @check_api("SetTempControlProfileGetNext")
    def SetTempControlProfileGetNext(DevId):
        return TCClientPyAPIWrapper.m_tc.SetTempControlProfileGetNext(DevId)

    @staticmethod
    @check_api("SetTempControlProfileDelete")
    def SetTempControlProfileDelete(DevId, Index):
        TCClientPyAPIWrapper.m_tc.SetTempControlProfileDelete(DevId, Index)

    @staticmethod
    @check_api("TempControlWaitTemperature")
    def TempControlWaitTemperature(DevId, Temp, TempDeviation):
        """
        Wait for establishment of specified temperature.
        TC_API  TCTempControlWaitTemperature(unsigned long	DevId, unsigned long	Temp);

        :param DevId:unsigned long
        :param Temp:unsigned long
        :return:
        """
        TCClientPyAPIWrapper.m_tc.TempControlWaitTemperature(DevId, Temp, TempDeviation)

    @staticmethod
    @check_api("TempControlAction")
    def TempControlAction(DevId, Action):
        TCClientPyAPIWrapper.m_tc.TempControlAction(DevId, Action)
