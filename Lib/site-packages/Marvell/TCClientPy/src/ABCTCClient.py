from abc import abstractmethod
from builtins import object, str, range
from .enumTC import *
import warnings

class ABCTCClient(object):
    def __init__(self):
        raise NotImplementedError('ERROR: Cant instantiate abstract class')

    ### Flex/MaxTC ###
    @abstractmethod
    def ConnectToFlexTC(self, deviceID, IP):
        pass

    @abstractmethod
    def DisconnectFromFlexTC(self):
        pass

    @abstractmethod
    def TempControlReadFlexTCTemperature(self, DevId):
        pass

    @abstractmethod
    def TempControlGetFlexTCSetpoint(self):
        pass

    @abstractmethod
    def TempControlSetFlexTCTemperature(self, DevId, Temp, RampTime):
        pass

    @abstractmethod
    def TempControlGetFlexTCPower(self):
        pass

    @abstractmethod
    def TempControlSetFlexTCPower(self, Action):
        pass

    @abstractmethod
    def TempControlWaitFlexTCTemperature(self, DevId, Temp, TempDeviation, StableSamples, WaitTimeout):
        pass

    ### Oven ###
    @abstractmethod
    def ConnectToOven(self, deviceID, IP, portNum):
        pass

    @abstractmethod
    def DisconnectFromOven(self):
        pass

    @abstractmethod
    def TempControlReadOvenTemperature(self, DevId):
        pass

    @abstractmethod
    def TempControlGetOvenSetpoint(self):
        pass

    @abstractmethod
    def TempControlSetOvenTemperature(self, DevId, Temp, RampTime):
        pass

    @abstractmethod
    def TempControlGetOvenPowerMode(self):
        pass

    @abstractmethod
    def TempControlSetOvenPower(self, Action):
        pass

    @abstractmethod
    def TempControlWaitOvenTemperature(self, DevId, Temp, TempDeviation, StableSamples, WaitTimeout):
        pass


