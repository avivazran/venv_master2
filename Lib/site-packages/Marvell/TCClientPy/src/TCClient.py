from __future__ import absolute_import
from builtins import object, str, range
from .enumTC import *
import warnings
from Marvell.TCClientPy.src.ABCTCClient import *
import threading



deprecated_msg = "'{0}' is deprecated. Please use other APIs."
unsupported_msg = "'{0}' is no longer supported. Please use other APIs."

lock = threading.Lock()

class TCClient(ABCTCClient):
    def __init__(self, flex_api, oven_api):
        self.flex_api = flex_api
        self.oven_api = oven_api
        self.dev_map = {}       # For legacy


    ### Flex/MaxTC ###

    def ConnectToFlexTC(self, deviceID, IP):
        self.flex_api.tc_connect(IP)

    def DisconnectFromFlexTC(self):
        self.flex_api.tc_disconnect()

    def TempControlReadFlexTCTemperature(self, DevId):
        with lock:
            return self.flex_api.read_temperature()

    def TempControlGetFlexTCSetpoint(self):
        return self.flex_api.get_setpoint()

    def TempControlSetFlexTCTemperature(self, DevId, Temp, RampTime):
        with lock:
            self.flex_api.set_temperature(Temp, RampTime)

    def TempControlGetFlexTCPower(self):
        is_on = self.flex_api.is_power_on()
        return PowerActionEnum.POWER_ON.value if is_on else PowerActionEnum.POWER_OFF.value

    def TempControlSetFlexTCPower(self, Action):
        is_on = (Action == PowerActionEnum.POWER_ON.value)
        self.flex_api.turn_power_on_off(is_on)

    def TempControlWaitFlexTCTemperature(self, DevId, Temp, TempDeviation, StableSamples, WaitTimeout):
        self.flex_api.wait_for_temp(Temp, TempDeviation, StableSamples, WaitTimeout)

    ### Oven ###

    def ConnectToOven(self, deviceID, IP, portNum, ovenType=None):
        if ovenType is not None:
            self.oven_api.set_oven_type(ovenType)
        self.oven_api.tc_connect(IP)

    def DisconnectFromOven(self):
        self.oven_api.tc_disconnect()

    def TempControlReadOvenTemperature(self, DevId):
        with lock:
            return self.oven_api.read_temperature()

    def TempControlGetOvenSetpoint(self):
        return self.oven_api.get_setpoint()

    def TempControlSetOvenTemperature(self, DevId, Temp, RampTime):
        with lock:
            self.oven_api.set_temperature(Temp, RampTime)

    def TempControlGetOvenPowerMode(self):
        return self.oven_api.get_power_mode()

    def TempControlSetOvenPower(self, Action):
        is_on = (Action == PowerActionEnum.POWER_ON.value)
        self.oven_api.turn_power_on_off(is_on)

    def TempControlWaitOvenTemperature(self, DevId, Temp, TempDeviation, StableSamples, WaitTimeout):
        self.oven_api.wait_for_temp(Temp, TempDeviation, StableSamples, WaitTimeout)


    ### Legacy - Deprecated ###

    def warn_deprecated(self, api_name):
        warnings.warn(deprecated_msg.format(api_name))

    def TempControlDevMapSet(self, DevId, DevType):
        """
        Map Temperature Control Device to logic Device Id
        TC_API  TCTempControlDevMapSet(unsigned long DevId, TempDevTypeEnum DevType);

        :param DevId: unsigned long - logic device id
        :param DevType: TempDevTypeEnum - Temperature Control Device
        :return:
        """
        self.warn_deprecated('TempControlDevMapSet')

        if DevId in self.dev_map:
            raise Exception('DevId is already in use')
        elif DevType in list(self.dev_map.values()):
            raise Exception('DevType is already defined')
        else:
            self.dev_map[DevId] = TempDevTypeEnum(DevType)

    def TempControlDevMapGetNext(self, DevId):
        """
        Get mapping of logic Device Ids to Temperature Control Device.
        If DevId = 0 the function returns the first mapped device.
        The consecutive calls for this function with value of DevId returned by
        previous call return mapped device Ids in increasing order. When there is
        no yet mapped devices the GT_NO_MORE status returned.

        TC_API  TCTempControlDevMapGetNext(unsigned long *DevId, TempDevTypeEnum *DevType);

        :param DevId: unsigned long *
        :param DevType:TempDevTypeEnum *DevType
        :return:
        """
        self.warn_deprecated('TempControlDevMapGetNext')

        dev_ids = sorted(self.dev_map.keys())
        if DevId in dev_ids:
            return {"DevId": DevId, "DevType": TempDevTypeEnum(self.dev_map[DevId])}
        else:
            for i in range(len(dev_ids)):
                if dev_ids[i] > DevId:
                    return {"DevId": dev_ids[i], "DevType": TempDevTypeEnum(self.dev_map[dev_ids[i]])}
            raise Exception('No more entries following DevId ' + str(DevId))

    def TempControlDevMapDelete(self, DevId):
        """

        Delete Temperature Control Device from mapping.
        The device should be previously disconnected.
        TC_API  TCTempControlDevMapDelete(unsigned long	DevId);

        :param DevId:unsigned long
        :return:
        """
        self.warn_deprecated('TempControlDevMapDelete')

        if DevId in self.dev_map:
            del self.dev_map[DevId]
        else:
            raise Exception('DevId ' + str(DevId) + ' is not defined')

    def TempControlSetTemperature(self, DevId, Temp, RampTime):
        """
        Algo for Set Ramp time and write temperature, work only for FlexTc/MaxTc
        TC_API  TCTempControlSetTemperature(unsigned long	DevId, unsigned long	Temp,unsigned long	RampTime,);

        :param DevId:unsigned long
        :param Temp:unsigned long
        :param RampTime:unsigned long

        :return:
        """
        self.warn_deprecated('TempControlSetTemperature')
        self.TempControlSetFlexTCTemperature(DevId, Temp, RampTime)

    def TempControlReadTemperature(self, DevId):
        """
        Read the current temperature of Temperature Control Device.
        TC_API  TCTempControlReadTemperature(unsigned long	DevId, unsigned long	*Temp);

        :param DevId:unsigned long
        :param Temp:unsigned long	*
        :return:
        """
        self.warn_deprecated('TempControlReadTemperature')

        if DevId not in self.dev_map:
            raise Exception('DevId ' + str(DevId) + ' is not defined')
        else:
            tc_type = self.dev_map[DevId]

            if tc_type == TempDevTypeEnum.FLEXTC:
                return self.TempControlReadFlexTCTemperature(DevId)
            elif tc_type == TempDevTypeEnum.OVEN:
                return self.TempControlReadOvenTemperature(DevId)
            else:
                raise Exception('Unsupported TC type')


    ### Unsupported ###

    def raise_unsupported(self, api_name):
        raise Exception(unsupported_msg.format(api_name))

    def TempControlAction(self, DevId, Action):
        self.raise_unsupported('TempControlAction')

    def SetTempControlProfileSet(self, DevId, Index, Temp, RampTime, SoakTime, JumpOp):
        self.raise_unsupported('SetTempControlProfileSet')

    def SetTempControlProfileGetNext(self, DevId):
        self.raise_unsupported('SetTempControlProfileGetNext')

    def SetTempControlProfileDelete(self, DevId, Index):
        self.raise_unsupported('SetTempControlProfileDelete')

    def TempControlWaitTemperature(self, DevId, Temp, TempDeviation):
        self.raise_unsupported('TempControlWaitTemperature')
