from builtins import object
from .FlexMaxTC import *
from time import sleep


class FlexMaxTCAPI(object):
    WAIT_TIMEOUT = 300     # sec
    SAMPLE_DELAY = 5    # sec
    STABLE_SAMPLE_NUM = 10

    def __init__(self):
        self.tc = None

    def tc_connect(self, tc_ip):
        try:
            self.tc = FlexMaxTC(tc_ip)
            self.tc.connect()
        except Exception as e:
            raise Exception("FlexMaxTC connection: " + str(e))

    def tc_disconnect(self):
        self.tc = None

    def set_temperature(self, target_temperature, ramp_time=100):
        self.tc.WriteMI("0045", self.tc.decimal_to_operand(ramp_time, False))   # Set RampTime
        self.tc.WriteMB("0074", 1)  # Activate RampTime

        temp_operand = self.tc.decimal_to_operand(target_temperature)
        self.tc.WriteMI("0699", temp_operand)

    def read_temperature(self):
        temp_res = self.tc.ReadMI("0006")
        temp = self.tc.operand_to_decimal(self.tc.get_val(temp_res))
        return temp

    def wait_for_temp(self, temp, temp_deviation, stable_samples_target=STABLE_SAMPLE_NUM, wait_timeout=WAIT_TIMEOUT):
        stable_samples = 0
        total_time = 0

        curr_temp = self.read_temperature()

        while True:
            if abs(curr_temp - temp) <= temp_deviation:
                stable_samples += 1
            else:
                stable_samples = 0

            if total_time >= wait_timeout or stable_samples >= stable_samples_target:
                break

            sleep(self.SAMPLE_DELAY)
            total_time += self.SAMPLE_DELAY

            curr_temp = self.read_temperature()

        if total_time >= wait_timeout:
            raise Exception("Timeout waiting for target temperature")

    def get_setpoint(self):
        setpoint_res = self.tc.ReadMI("0699")
        setpoint = self.tc.operand_to_decimal(self.tc.get_val(setpoint_res))
        return setpoint

    def is_power_on(self):
        power_res = self.tc.ReadMB("0020")
        power_val = self.tc.get_val(power_res)
        return power_val == '0'   # 0=On, 1=Off

    def turn_power_on_off(self, is_on=True):
        self.tc.WriteMB("0020", 0 if is_on else 1)  # 0=On, 1=Off
