from __future__ import absolute_import
from builtins import object, str, range
from .enumTC import *
import warnings
from Marvell.TCClientPy.src.ABCTCClient import *
import threading

lock = threading.Lock()


class TCClientMock(ABCTCClient):
    def __init__(self):
        self.FlexTCTemperature = 25
        self.FlexTCSetpoint = 25
        self.OvenTemperature = 25
        self.OvenSetpoint = 25
        self.isConnected = False

    ### Flex/MaxTC ###

    def ConnectToFlexTC(self, deviceID, IP):
        self.isConnected = True
        pass

    def DisconnectFromFlexTC(self):
        self.isConnected = False
        pass

    def TempControlReadFlexTCTemperature(self, DevId):
        with lock:
            if not self.isConnected:
                raise Exception("Flex Disconnected, please connect")
            return self.FlexTCTemperature

    def TempControlGetFlexTCSetpoint(self):
        return self.FlexTCSetpoint

    def TempControlSetFlexTCTemperature(self, DevId, Temp, RampTime):
        with lock:
            if not self.isConnected:
                raise Exception("Flex Disconnected, please connect")
            self.FlexTCTemperature = Temp

    def TempControlGetFlexTCPower(self):
        return PowerActionEnum.POWER_ON.value

    def TempControlSetFlexTCPower(self, Action):
        pass

    def TempControlWaitFlexTCTemperature(self, DevId, Temp, TempDeviation, StableSamples, WaitTimeout):
        pass

    ### Oven ###

    def ConnectToOven(self, deviceID, IP, portNum):
        pass

    def DisconnectFromOven(self):
        pass

    def TempControlReadOvenTemperature(self, DevId):
        return self.OvenTemperature

    def TempControlGetOvenSetpoint(self):
        return self.OvenSetpoint

    def TempControlSetOvenTemperature(self, DevId, Temp, RampTime):
        self.OvenTemperature = Temp

    def TempControlGetOvenPowerMode(self):
        return 1

    def TempControlSetOvenPower(self, Action):
        pass

    def TempControlWaitOvenTemperature(self, DevId, Temp, TempDeviation, StableSamples, WaitTimeout):
        pass

