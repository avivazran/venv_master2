from __future__ import print_function
from __future__ import division
from Marvell.TCClientPy.src.TCClientFactory import *
from Marvell.TCClientPy.src.enumOvenType import OvenTypeEnum as Type
from Marvell.TCClientPy.src.TCFlexMaxAdapter import *
from SafetyMonitor.SafetyMonitor import SafetyMonitor
import time
from threading import Thread
import asyncio
import traceback

# IP = "10.5.230.190"#"10.4.55.113"
# IP = "10.4.52.112"
# IP = "10.4.52.38"
# IP = "10.4.54.116"
IP = '1'

ENVISYS_IP = "10.28.33.29"

OVEN_PORT = 8888
# OVEN_IP = "10.4.49.12"
OVEN_IP = "10.4.49.11"


class waiting_thread(object):

    def __init__(self):
        self.stopped = False

    def _wait_to_finish(self):
        self.stopped = False
        while True:
            print(".", end='')
            time.sleep(1)
            if self.stopped:
                print("thread stopped.")
                break

    def start(self):
        self.thread = Thread(target=self._wait_to_finish)
        self.thread.start()

    def stop(self):
        self.stopped = True
        self.thread.join()


def OVEN_Connection_Sequence(tc, devId):
    try:
        tc.ConnectToOven(devId, OVEN_IP, OVEN_PORT)
    except Exception as e:
        raise Exception("Oven Connection: " + str(e))


def Flex_TC_Connection_Sequence(tc, devId):
    try:
        tc.ConnectToFlexTC(devId, IP)
    except Exception as e:
        raise Exception("Flex TC Connection : " + str(e))


def Oven_temperature_Write(tc, devId, temp, ramp_time):
    try:
        tc.TempControlSetOvenTemperature(devId, temp, ramp_time)
    except Exception as e:
        raise Exception("Oven temperature setting: " + str(e))


def FlexTC_temperature_Write_and_set_rate(tc, devId, temp, ramp_time):
    try:
        tc.TempControlSetFlexTCTemperature(devId, temp, ramp_time)
    except Exception as e:
        raise Exception("MaxTC failed to set temperature: " + str(e))


def FlexTC_Disconnection_Sequence(tc, devId):
    try:
        tc.DisconnectFromFlexTC(devId)
    except Exception as e:
        raise Exception("Flex TC Disconnection: " + str(e))


def Oven_Disconnection_Sequence(tc, devId):
    try:
        tc.DisconnectFromOven(devId)
    except Exception as e:
        raise Exception("Exception while running Oven Disconnection: " + str(e))


def FlexTC_test_read_write_wait_sequence(tc, devId):
    ramp_time = 50
    temp = tc.TempControlReadFlexTCTemperature(devId)
    print("Initial temp = %s Celsius" % temp)

    temps = [0, 20, -20]
    # wait_to_finish_thread.start()
    # wait_to_finish_thread.join()
    for wt in temps:
        print("Write to FlexTC value=%s Celsius" % wt)
        # write
        FlexTC_temperature_Write_and_set_rate(tc, devId, wt, ramp_time)

        # wait to stable
        # st = time.time()
        wait_to_finish_thread = waiting_thread()
        wait_to_finish_thread.start()

        sp = tc.TempControlGetFlexTCSetpoint()
        time.sleep(60)  # TODO: Temp wait is not yet implemented

        wait_to_finish_thread.stop()
        # ft = time.time()

        # read
        rt = tc.TempControlReadFlexTCTemperature(devId)

        print("Write Temp = %s (C), Set point = %s (C), Actual read Temp = %s (C)" % (
            wt, sp, rt))  # (old_div((ft - st), 60))


def Oven_new_test():
    devId = None
    tc = TCClientFactory.getTCInstance()

    OVEN_Connection_Sequence(tc, devId)
    temp = tc.TempControlReadOvenTemperature(devId)
    print("Initial temp = %s Celsius" % temp)
    wt = 34
    ramp_time = 52
    Oven_temperature_Write(tc, devId, wt, ramp_time)
    time.sleep(60)
    temp = tc.TempControlReadOvenTemperature(devId)
    print("Initial temp = %s Celsius" % temp)
    # tc.TempControlWaitOvenTemperature()
    print(tc.TempControlGetOvenPowerMode())
    tc.TempControlSetOvenPower(PowerActionEnum.POWER_OFF)
    time.sleep(5)
    tc.TempControlSetOvenPower(PowerActionEnum.POWER_ON)


def Oven_test_read_write_wait_sequence(tc, devId):
    ramp_time = 50
    temp = tc.TempControlReadOvenTemperature(devId)
    print("Initial temp = %s Celsius" % temp)

    temps = [0, 20, -20]
    # wait_to_finish_thread.start()
    # wait_to_finish_thread.join()
    for wt in temps:
        print("Write to FlexTC value=%s Celsius" % wt)
        # write
        Oven_temperature_Write(tc, devId, wt, ramp_time)

        # wait to stable
        # st = time.time()
        wait_to_finish_thread = waiting_thread()
        wait_to_finish_thread.start()

        sp = tc.TempControlGetOvenSetpoint()
        time.sleep(60)  # TODO: Temp wait is not yet implemented

        wait_to_finish_thread.stop()
        # ft = time.time()

        # read
        rt = tc.TempControlReadOvenTemperature(devId)

        print("Write Temp = %s (C), Set point = %s (C), Actual read Temp = %s (C)" % (
            wt, sp, rt))  # (old_div((ft - st), 60))


def FlexTC_main():
    try:
        devId = None

        tc = TCClientFactory.getTCInstance()

        Flex_TC_Connection_Sequence(tc, devId)

        FlexTC_temperature_Write_and_set_rate(tc, devId, 50, 15)

        FlexTC_test_read_write_wait_sequence(tc, devId)

        FlexTC_Disconnection_Sequence(tc, devId)

        print("Done!")
    except Exception as e:
        print("Failed! " + str(e))


def FlexTCMock_main():
    try:
        devId = None

        tc = TCClientFactory.getTCInstance(True)

        Flex_TC_Connection_Sequence(tc, devId)

        FlexTC_temperature_Write_and_set_rate(tc, devId, 50, 15)

        FlexTC_test_read_write_wait_sequence(tc, devId)

        FlexTC_Disconnection_Sequence(tc, devId)

        print("Done!")
    except Exception as e:
        print("Failed! " + str(e))


def Oven_main():
    try:
        devId = None
        tc = TCClientFactory.getTCInstance()

        OVEN_Connection_Sequence(tc, devId)

        Oven_test_read_write_wait_sequence(tc, devId)

        Oven_Disconnection_Sequence(tc, devId)

        print("Done!")
    except Exception as e:
        print("Failed! " + str(e))


'''
A script that exposes bug on the Thermotron 
'''


def thermotron_Bug_Run():
    tc = TCClientFactory.getTCInstance()
    tc.ConnectToOven(None, OVEN_IP, None)
    tc.TempControlSetOvenPower(PowerActionEnum.POWER_OFF)
    # Exeception on the next line
    if tc.TempControlGetOvenPowerMode() == 1:
        print("device is on")
    else:
        print("device is off")

    time.sleep(2)
    tc.TempControlSetOvenPower(PowerActionEnum.POWER_ON)

    if tc.TempControlGetOvenPowerMode() == 1:
        print("device is on")
    else:
        print("device is off")
    tc.DisconnectFromOven()


def Envisys_main():
    tc = TCClientFactory.getTCInstance(Type.ENVISYS)
    tc.ConnectToOven(None, ENVISYS_IP, None)
    # tc.TempControlGetOvenSetpoint()
    # # tc.ConnectToOven(None, OVEN_IP, None)
    #
    # if tc.TempControlGetOvenPowerMode():
    #     print("device is on")
    # else:
    #     print("device is off")
    # print(f"Temp is: {tc.TempControlReadOvenTemperature(None)}")
    sleep(7)
    s = tc.TempControlGetOvenSetpoint()
    print(s)
    # print(f"Set Temp is: {tc.TempControlGetOvenSetpoint()}")
    # tc.TempControlSetOvenTemperature(None, -5, 0)
    # time.sleep(0.2)
    # print(f"Temp is: {tc.TempControlReadOvenTemperature(None)}")
    # print(f"Set Temp is: {tc.TempControlGetOvenSetpoint()}")
    # tc.TempControlSetOvenTemperature(None, 34, 0)
    # # tc.TempControlWaitOvenTemperature(None, 27, 2.5, 5, 60)
    # print(f"Temp is: {tc.TempControlReadOvenTemperature(None)}")
    # print(f"Set Temp is: {tc.TempControlGetOvenSetpoint()}")
    # tc.TempControlSetOvenPower(PowerActionEnum.POWER_OFF)
    # if tc.TempControlGetOvenPowerMode() == 1:
    #     print("device is on")
    # else:
    #     print("device is off")
    #
    # time.sleep(2)
    # tc.TempControlSetOvenPower(PowerActionEnum.POWER_ON)
    #
    # if tc.TempControlGetOvenPowerMode() == 1:
    #     print("device is on")
    # else:
    #     print("device is off")
    # # tc.TempControlSetOvenTemperature(None, -11, 0.3)
    # tc.DisconnectFromOven()
    # tc.TempControlGetEnvisysTCPower()


def Monitor_main():
    tc = TCClientFactory.getTCInstance()
    tc.ConnectToOven(None, OVEN_IP, OVEN_PORT)

    # tc.ConnectToOven(None, OVEN_IP, None)

    if tc.TempControlGetOvenPowerMode():
        print("device is on")
    else:
        print("device is off")
    print(f"Temp is: {tc.TempControlReadOvenTemperature(None)}")


def SafetyThreadTest():
    MIN_ALLOWED_TEMP = -30
    MAX_ALLOWED_TEMP = 30
    SAFE_TEMP = 25
    MAX_ALLOWED_TIME = 1
    SAMPLE_RATE = 0.1
    PATH = "C:\Git\Python_TC_Client\Marvell\TCClientPy\TC_tests"
    # try:
    devId = None

    tc = TCClientFactory.getTCInstance(None, True)
    oven_adapter = TCFlexMaxAdapter(tc)
    Flex_TC_Connection_Sequence(tc, devId)
    # It is important to connect first to the TC as in line 287 before you actually initializing the safety monitor
    tc_monitor = SafetyMonitor(oven_adapter, MIN_ALLOWED_TEMP, MAX_ALLOWED_TEMP, SAFE_TEMP, MAX_ALLOWED_TIME,
                               SAMPLE_RATE, PATH)

    tc_monitor.start_monitoring()

    FlexTC_temperature_Write_and_set_rate(tc, devId, 31, 50)
    # tc.DisconnectFromFlexTC()
    time.sleep(70)
    FlexTC_temperature_Write_and_set_rate(tc, devId, 1, 50)
    time.sleep(10)
    FlexTC_temperature_Write_and_set_rate(tc, devId, 31, 50)
    time.sleep(10)

    # FlexTC_temperature_Write_and_set_rate(tc, devId, MIN_ALLOWED_TEMP+1, 50)

    # raise Exception("testing")
    # FlexTC_test_read_write_wait_sequence(tc, devId)
    print("Done")

    #
    #     print("Done!")
    # except Exception as e:
    #     print("Failed! " + str(e))


if __name__ == '__main__':
    # FlexTCMock_main()
    # FlexTC_main()
    print("test")

    # Oven_main()
    # Oven_new_test()

    # Envisys_main()

    try:
        SafetyThreadTest()
    except ConnectionError as e:
        traceback.print_exc()
    except Exception as e:
        traceback.print_exc()
        loop = asyncio.get_event_loop()
        try:
            loop.run_forever()
        finally:
            loop.close()
