from Marvell.pytoolsinfra.ConfigurationModule.Generator.Generator import Generator
from unittest import TestCase
from os import path

THIS_FOLDER = path.dirname(path.realpath(__file__)) + '\\'


class TestCodeGeneratorHw(TestCase):
    file_path = THIS_FOLDER + r"..\assets\Setup_HW.xlsx"
    tests_output_lib = path.dirname(
        path.realpath(__file__)) + '\\' +'tests_output\\'

    def test_generator_section(self):
        generator = Generator(gen_type=Generator.GeneratorType.HW_GENERATOR_TYPE)
        output_file = "{}output_generator_example_section_HW.py".format(self.tests_output_lib)
        generator.create(self.file_path, output_file, "setup.DUT General Info")
        self.assertIsNotNone(generator.generator.codegenerator.workbook)

    def test_generator_sheet(self):
        generator = Generator(gen_type=Generator.GeneratorType.HW_GENERATOR_TYPE)
        output_file = "{}output_generator_sheet_HW.py".format(self.tests_output_lib)
        generator.create(self.file_path, output_file, "setup")
        self.assertIsNotNone(generator.generator.codegenerator.workbook)

    def test_generator_section_type(self):
        generator = Generator(gen_type=Generator.GeneratorType.HW_GENERATOR_TYPE)
        output_file = "{}output_generator_section_with_type_HW.py".format(self.tests_output_lib)
        generator.create(self.file_path, output_file, "setup.Port Data1")
        self.assertIsNotNone(generator.generator.codegenerator.workbook)

