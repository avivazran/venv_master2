from __future__ import absolute_import
from builtins import str
from builtins import object
from .ScriptTypeClassesDictionary import SCRIPT_TYPE_CLASSES
from .ScriptExecuterExceptions import *
import os

class ScriptTypeFactory(object):

    @staticmethod
    def create_script_class(path,script_params=None):
        if path is None:
            raise PathException("No Provided Path!!\nCannot Execute Script")
        assert path is not None
        """parsing the script suffix"""
        script_suffix = "." + str(str(path).split('.')[-1])
        """check if script suffix is a valid suffix specified in SCRIPT_TYPE_CLASSES"""
        if (script_suffix in SCRIPT_TYPE_CLASSES) is False:
            raise WrongTypesException("Given path is to unsupported script type\n The suffix of "
                                      +"the script is: " + script_suffix)

        if os.path.isfile(path) is False:
            raise PathException("Provided Path is NOT exists path!!\nCannot Execute Script")

        """check if params_dict was passed"""
        if script_params is not None:
            """is params_dict that was passed is of dict type"""
            if type(script_params) != type({}):
                raise WrongTypesException("Parameters for script must be passed in dictionary "
                                          "type!!\npassed: " +str(type(script_params)) + "\n")
        try:
            script_class = SCRIPT_TYPE_CLASSES[script_suffix](path,script_params)
        except TypeError as e:
            raise WrongTypesException("Cannot Create Script Class Using Given Parameters.\n"
                                      + str(e))
        return script_class
