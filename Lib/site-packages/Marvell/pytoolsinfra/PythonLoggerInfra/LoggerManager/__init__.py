from Marvell.pytoolsinfra.PythonLoggerInfra.CommonUtils.CustomLoggingLevels import *

from Marvell.pytoolsinfra.CommonDef.CommonUtils.Switch import Switch, case
from Marvell.pytoolsinfra.PythonLoggerInfra.TestLogger.LoggerInterface.ABCTestLogger import ABCTestLogger
from Marvell.pytoolsinfra.PythonLoggerInfra.TestLogger.LoggerImpl.HTML_Logger import HTMLLogger
from Marvell.pytoolsinfra.PythonLoggerInfra.TestLogger.LoggerImpl.BaseTestLogger import BaseTestLogger


class LogType(Enum):
    TEST_LOGGER = 1
    HTML_LOGGER = 2


def GetLogger(source_name, logPath="", logname="", append_source_name=True, logger_type=LogType.TEST_LOGGER,
              console_only_logger=False, encoding='utf-8'):
    # type: (str, str, str, bool, LogType, bool, str) -> ABCTestLogger

    while Switch(logger_type):
        if case(LogType.TEST_LOGGER):
            result = BaseTestLogger(source_name, logPath, logname, append_source_name, console_only_logger, encoding)
            break
        if case(LogType.HTML_LOGGER):
            result = HTMLLogger(source_name, logPath, logname, append_source_name, console_only_logger, encoding)
            break
   
    return result


# test = GetLogger('name')
# test.info("test")
# test.error("test")
# test.critical("test")
# try:
#     a = 5
#     b = 0
#     c = a/b
# except ZeroDivisionError:
#     test.exception("test")
# test.warning("test")
