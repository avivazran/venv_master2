# from __future__ import annotations
from builtins import object, str
from Marvell.EMClientPy.src.EMClientFactory import *
from deprecated import deprecated
from Marvell.EMClientPy.src.Common.Types import BoardPowerModeEnum


class check_api(object):
    def __init__(self, api_name):
        self.api_name = api_name

    def __call__(self, func):
        def inner(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                raise Exception("EMClientPyAPIWrapper " + self.api_name + ": " + str(e))
        return inner


class EMClientPyAPIWrapper(object):
    m_em: ElectricalManager = None

    def __init__(self):
        try:
            if EMClientPyAPIWrapper.m_em is None:
                EMClientPyAPIWrapper.m_em = EMClientFactory.getEM_Instance()
        except Exception as e:
            raise Exception("EMClientPyAPIWrapper __init__: " + str(e))

    @staticmethod
    @check_api('configLoad')
    def configLoad(path):
        """

        :param path: file path
        :return:
        """
        EMClientPyAPIWrapper.m_em.ConfigLoad(path)

    @staticmethod
    @check_api('configContentLoad')
    def configContentLoad(xmlContent):
        """

        :param xmlContent: file path
        :return:
        """
        EMClientPyAPIWrapper.m_em.ConfigContentLoad(xmlContent)

    @staticmethod
    @check_api('configUnload')
    @deprecated(version='3.0.0', reason='Not required anymore prior to configLoad and configContentLoad')
    def configUnload():
        """
        :return:
        """
        EMClientPyAPIWrapper.m_em.ConfigUnload()

    @staticmethod
    @check_api('SetI2cSettings')
    def SetI2cSettings(lptNum, frequency, mode, waitTime):
        """

        :param lptNum:
        :param frequency:
        :param mode:
        :param waitTime:
        :return:
        """
        EMClientPyAPIWrapper.m_em.SetI2cSettings(lptNum, frequency, mode, waitTime)

    @staticmethod
    @check_api('SetI2cInterface')
    def SetI2cInterface(i2cInterface):
        """

        :param i2cInterface:
        :return:
        """
        EMClientPyAPIWrapper.m_em.SetI2cInterface(i2cInterface)

    @staticmethod
    @check_api('DutPwr')
    def DutPwr(action):
        """

        :param action:
        :return:
        """
        actionEnum = BoardPowerModeEnum[action]
        EMClientPyAPIWrapper.m_em.DutPwr(actionEnum)

    @staticmethod
    @check_api('SetElectricalManagementSetTableEntry')
    @deprecated(version='3.0.0', reason='Not in use')
    def SetElectricalManagementSetTableEntry(devId, voltDiv, smmId, channel, smmVoltageCh):
        """
        :param devId:
        :param voltDiv:
        :param smmId:
        :param channel:
        :param smmVoltageCh:
        :return:
        """
        EMClientPyAPIWrapper.m_em.SetElectricalManagementSetTableEntry(devId, voltDiv, smmId, channel, smmVoltageCh)

    @staticmethod
    @check_api('SetElectricalManagementGetTableEntry')
    def SetElectricalManagementGetTableEntry():
        """
        :return:
        """
        return EMClientPyAPIWrapper.m_em.SetElectricalManagementGetTableEntry()

    @staticmethod
    @check_api('SetElectricalManagementGetTable')
    def SetElectricalManagementGetTable():
        """
        :return:
        """
        tbl = EMClientPyAPIWrapper.m_em.SetElectricalManagementGetTable()
        return locals().copy()

    @staticmethod
    @check_api('BoardReset')
    def BoardReset(delay):
        """
        :param delay:
        :return:
        """
        EMClientPyAPIWrapper.m_em.BoardReset(delay)

    @staticmethod
    @check_api('ResetDUTviaI2c')
    def ResetDUTviaI2c(delay):
        """
        :param delay:
        :return:
        """
        EMClientPyAPIWrapper.m_em.ResetDUTviaI2c(delay)

    @staticmethod
    @check_api('SetMainPowerSettings')
    def SetMainPowerSettings(action: str):
        """
        :param action:
        :return:
        """
        actionEnum = BoardPowerModeEnum[action]
        EMClientPyAPIWrapper.m_em.SetMainPowerSettings(actionEnum)

    @staticmethod
    @check_api('EmGeneralReadSet')
    def EmGeneralReadSet(devAddr, subAddrValid, subAddr, nBytes, value):
        """
        :param devAddr:
        :param subAddrValid:
        :param subAddr:
        :param nBytes:
        :param value:
        :return:
        """
        EMClientPyAPIWrapper.m_em.EmGeneralReadSet(devAddr, subAddrValid, subAddr, nBytes, value)

    @staticmethod
    @check_api('EmGeneralReadGet')
    def EmGeneralReadGet(devAddr, subAddrValid, subAddr, nBytes):
        """
        :param devAddr:
        :param devAddr:
        :param subAddrValid:
        :param subAddr:
        :param nBytes:
        :return: read value
        """
        Result = EMClientPyAPIWrapper.m_em.EmGeneralReadGet(devAddr, subAddrValid, subAddr, nBytes)
        return locals().copy()

    @staticmethod
    @check_api('A2DRead')
    def A2DRead(a2dId, channel):
        """
        :param a2dId:
        :param channel:
        :return:
        """
        return EMClientPyAPIWrapper.m_em.A2DRead(a2dId, channel)

    @staticmethod
    @check_api('StoreVddAsDefaultToNVM')
    @deprecated(version='3.0.0', reason='Causes undefined behaviour')
    def StoreVddAsDefaultToNVM(address):
        """
        :param address:
        :return:
        """
        # EMClientPyAPIWrapper.m_em.StoreVddAsDefaultToNVM(address)
        return None

    @staticmethod
    @check_api('SetVdd_PMBusValue')
    def SetVdd_PMBusValue(PsId, value):
        """

        :param PsId:
        :param value:
        :return:
        """
        EMClientPyAPIWrapper.m_em.SetVdd_PMBusValue(PsId, value)

    @staticmethod
    @check_api('GetIdd_PMBusValue')
    def GetIdd_PMBusValue(PsId):
        """

        :param PsId:
        :return: current value mA
        """

        IddValue = EMClientPyAPIWrapper.m_em.GetIdd_PMBusValue(PsId)
        return locals().copy()

    @staticmethod
    @check_api('SetPLLVoltageControl')
    def SetPLLVoltageControl(PsId, value):
        """

        :param PsId:
        :param value:
        :return:
        """
        EMClientPyAPIWrapper.m_em.SetPLLVoltageControl(PsId, value)

    @staticmethod
    @check_api('GetIdd_PMBusValue')
    def GetVdd_PMBusValue(PsId):
        """

        :param PsId:
        :return: current value mA
        """

        VddValue = EMClientPyAPIWrapper.m_em.GetVdd_PMBusValue(PsId)
        return locals().copy()

    @staticmethod
    @check_api('PsInfoGet')
    def PsInfoGet(PsId):
        """
        :param PsId:
        :return:
        """
        return EMClientPyAPIWrapper.m_em.PsInfoGet(PsId)

    @staticmethod
    @check_api('GetTemperature')
    def GetTemperature(tsenId, channel):
        """

        :param tsenId:
        :param channel:
        :return: TemperatureValue
        """
        TemperatureValue = EMClientPyAPIWrapper.m_em.GetTemperature(tsenId, channel)
        return locals().copy()

    @staticmethod
    @check_api('GetSub20IdNumbers')
    def GetSub20IdNumbers():
        """
        :return: Array GetSub20IdNumbers ids
        """
        sub20Ids = EMClientPyAPIWrapper.m_em.GetSub20IdNumbers()
        return locals().copy()

    @staticmethod
    @check_api('GetA2Ds')
    def GetA2Ds():
        """
        :return: Array of A2D's id
        """
        A2Ds = EMClientPyAPIWrapper.m_em.GetA2Ds()
        return locals().copy()

    @staticmethod
    @check_api('GetPSs')
    def GetPSs():
        """

        :return: Array of PS's id
        """
        PSs = EMClientPyAPIWrapper.m_em.GetPSs()
        return locals().copy()

    @staticmethod
    @check_api('GetSMMs')
    def GetSMMs():
        """
        :return: Array of SMM's id
        """
        SMMs = EMClientPyAPIWrapper.m_em.GetSMMs()
        return locals().copy()

    @staticmethod
    @check_api('GetA2DChannels')
    def GetA2DChannels(a2dId):
        """
        :param a2dId:
        :return:Array of A2D channels id
        """
        A2DChannels = EMClientPyAPIWrapper.m_em.GetA2DChannels(a2dId)
        return locals().copy()

    @staticmethod
    @check_api('GetSMMChannels')
    def GetSMMChannels(smmId):
        """
        :param smmId:
        :return: Array of SMM channels id
        """
        SMMChannels = EMClientPyAPIWrapper.m_em.GetSMMChannels(smmId)
        return locals().copy()

    @staticmethod
    @check_api('setLog')
    def setLog(log_level):
        """
        :param log_level:
        :return:
        """
        EMClientPyAPIWrapper.m_em.setLog(log_level)

    @staticmethod
    @check_api('Disconnect')
    def Disconnect():
        """
        :return:
        """
        EMClientPyAPIWrapper.m_em.Disconnect()

    @staticmethod
    @check_api('GetPLDs')
    def GetPLDs():
        """
        :return: Array of PLD's id
        """
        PLDs = EMClientPyAPIWrapper.m_em.GetPLDs()
        return locals().copy()

    @staticmethod
    @check_api('GetPLDModes')
    def GetPLDModes(pldId):
        """
        :param pldId:
        :return: Array of PLD modes id
        """
        PLDModes = EMClientPyAPIWrapper.m_em.GetPLDModes(pldId)
        return locals().copy()

    @staticmethod
    @check_api('SetPLLVoltageControl')
    def SetFanHeaterControlMode(pldId, modeNum):
        """

        :param pldId:
        :param modeNum:
        :return:
        """
        EMClientPyAPIWrapper.m_em.SetFanHeaterControlMode(pldId, modeNum)

    @staticmethod
    @check_api('SetPPMClock')
    def SetPPMClock(clkSyncId, clkSyncCh, ppmValue):
        """
         Set the PPM value for a clock synchronizer channel.

         :param clkSyncId: Clock synchronizer ID as defined in the XML.
         :param clkSyncCh: Clock synchronizer channel ID as defined in the XML.
         :param ppmValue: The PPM value (e.g., +/-100, 0, 20, ...).
         :return: None if successful, an exception should be thrown if any errors occur.
         """

        EMClientPyAPIWrapper.m_em.SetPPMClock(clkSyncId, clkSyncCh, ppmValue)

