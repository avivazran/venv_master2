# from __future__ import print_function
# import codecs
import os
import sys
from os import path
from inspect import getfile, currentframe

sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

from Marvell.EMClientPy.src.EMClientFactory import *

dir = os.path.dirname(os.path.abspath(getfile(currentframe())))  # script directory
from Marvell.EMClientPy.src.Common.Types import BoardPowerModeEnum, I2cInterfaceEnum

XML_FILE_TL10_PPM = r"C:\temp\TL10\EM\TL10DB_Rev03_XML_PPM.xml"
XML_FILE_TL10 = r"C:\temp\TL10\EM\TL10DB_Rev03_XML.xml"
XML_FILE_TL10_AC2DC = r"C:\temp\TL10\EM\TL10DB_Rev03_XML_ac2dc.xml"
XML_FILE_Harrier = r"C:\temp\xml\A3M_DB_EM_wPMbus_Rev_1_1_converted.xml"
SUB20 = 0x8367
SUB20_Harrier = 0x548b


def debug_TL10_getVdd_mibs():
    IP1_TL10 = "10.4.65.187:23,root,Innovium123"
    IP2_TL10 = "10.4.65.184:23,root,Innovium123"

    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_CPU, 1)
        em.SetI2cSettings(IP1_TL10)
        print("Done!")
    except Exception as e:
        print(str(e))


def debug_TL10_setPPMClock():
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10_PPM)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        em.SetI2cSettings(SUB20)

        em.SetPPMClock(0, 0, -100)

        print("Done")
    except Exception as err:
        print(str(err))


def GetTemp_DC2DC_PMBusValue():
    print("GetTemp_DC2DC_PMBusValue")
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10_AC2DC)
        # em.ConfigLoad(XML_FILE_Harrier)

        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        em.SetI2cSettings(SUB20)

        for psid in range(10):
            try:
                info = em.PsInfoGet(psid)
                # print(info)
                value = em.GetTemp_DC2DC_PMBusValue(psid)

                print(f"Ps Id={psid}, name:{info['name']} Temperature: {value} \u00b0C")
            except Exception as e:
                print(f"Error: Ps Id={psid}, Message:{str(e)}")

        print("Done")
    except Exception as err:
        print(str(err))


def EmGeneralReadGet():
    print("EmGeneralReadGet")
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10_AC2DC)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        em.SetI2cSettings(SUB20)

        addr = 0x5a
        reg = 0x8d
        value = em.EmGeneralReadGet(addr, 1, reg, 1)

        print(f"    EmGeneralReadGet : Dev {hex(addr)}, Reg {hex(reg)} Value {hex(value)}")

        print("Done")
    except Exception as err:
        print(str(err))


def EmGeneralReadSet():
    print("EmGeneralReadSet")
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10_AC2DC)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        em.SetI2cSettings(SUB20)

        addr = 0x59
        reg = 0
        data2write = em.EmGeneralReadGet(addr, 1, reg, 1)
        print(f"    EmGeneralReadGet : Dev {hex(addr)}, Reg {hex(reg)} Value {hex(data2write)}")

        for i in range(2):
            em.EmGeneralReadSet(addr, 1, reg, 1, data2write)
            print(f"        Try to Write : Dev {hex(addr)}, Reg {hex(reg)} data2write {hex(data2write)}")

            value = em.EmGeneralReadGet(addr, 1, reg, 1)
            print(
                f"        Read Back : Dev {hex(addr)}, Reg {hex(reg)} Write Value: {hex(data2write)} Read Value {hex(value)}")
            data2write = (data2write + 1) % 2

        print("Done")
    except Exception as err:
        print(str(err))


def StoreVddToNVM():
    print("start StoreVddToNVM")
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10_AC2DC)
        # em.ConfigLoad(XML_FILE_Harrier)

        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        # em.SetI2cSettings(SUB20_Harrier)
        em.SetI2cSettings(SUB20)

        ps = 7
        vddv = 1150
        print(f"Init status for PS #{ps}")

        print("     " + str(em.PsInfoGet(ps)))
        em.SetVdd_PMBusValue(ps, vddv)
        em.StoreVddToNVM(ps, False)

        print(f"Set Vdd and StoreVddToNVM : PS {ps}, Value {vddv} ")
        print("     " + str(em.PsInfoGet(ps)))

        em.StoreVddToNVM(0, factoryDeafult=True)

        print(f"StoreVddToNVM Factory Default")
        # print(em.PsInfoGet(ps))

        for i in em.GetPSs():
            ps = i
            print(f"PS #{i}")
            print("     " + str(em.PsInfoGet(ps)))
            try:
                read_vdd = em.GetVdd_PMBusValue(ps)
                print(f"      value : {read_vdd}")
            except Exception as e:
                str_e = str(e).replace('\n', "")
                print(f"     Get Vdd not supported for ps: {ps} error : {str_e}")

        print("Done")
    except Exception as err:
        print(str(err))


def StoreVddToNVM_factory_default():
    print("StoreVddToNVM_factory_default ")
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10_AC2DC)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        em.SetI2cSettings(SUB20)

        em.StoreVddToNVM(0, True)

        print(f"StoreVddToNVM_factory_default : PS ALL, Value Nominal from XML ")

        print("Done")
    except Exception as err:
        print(str(err))


def GetTemp_AC2DC_PMBusValue():
    print("GetTemp_AC2DC_PMBusValue")
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10_AC2DC)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        em.SetI2cSettings(SUB20)
        psid = 1

        temps = em.GetTemp_AC2DC_PMBusValue(psid)

        info = em.Ac2DcPsInfoGet(psid)

        for k, v in temps.items():
            print(f"AC/DC Ps {info['name']} Id={psid} {k}: {v} \u00b0C")

        print("Done")
    except Exception as err:
        print(str(err))


if __name__ == "__main__":
    # debug_TL10_setPPMClock()
    # debug_TL10_getVdd_mibs()
    GetTemp_DC2DC_PMBusValue()
    GetTemp_AC2DC_PMBusValue()
    EmGeneralReadGet()
    EmGeneralReadSet()
    StoreVddToNVM()
