# # from __future__ import absolute_import
from builtins import str
import os, sys, logging
import unittest
from .test_EMAPI_onBoard import *
from .debug_EMAPI_XMLParsing import *
from ddt import ddt, data

logger = logging.getLogger()
logger.level = logging.DEBUG  # DEBUG / INFO
stream_handler = logging.StreamHandler(sys.stdout)
logger.addHandler(stream_handler)

em = None
xml_a2ds = [0, 1, 2]
xml_smms = [0, 1, 2, 3]
xml_a2d_channels = {0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
                    1: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
                    2: [0, 1, 2, 5, 6, 7, 8, 9]}
xml_smm_channels = {0: [0, 1], 1: [0, 1], 2: [0, 1], 3: [0, 1]}

DUT = False

def set_EMClient():
    global em
    try:
        em = EMClientFactory.getEM_Instance()
    except Exception as e:
        raise Exception("Failed to Create EM Client.\n Exception :" + str(e))
def init_system():
    global DUT
    try:
        Init(em)
    except Exception as e:
        DUT = False

set_EMClient()
init_system()

@ddt
class EMClientPyUnitTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        pass


    @classmethod
    def tearDownClass(cls):
        pass

    def setUp(self):
        logging.debug("======================= Test Case =============================\n")
        logging.debug("Test Case : " + self._testMethodName)

    def tearDown(self):
        logging.debug("===============================================================\n\n\n")

    @data(em)
    def test_XML_A2D(self, em):
        try:
            em.configUnload()
            em.configLoad(dir + '\..\\resources\em_xml_test_parsing.xml')

            A2Ds = em.GetA2Ds()
            assert A2Ds == xml_a2ds
            for a2dId in A2Ds:
                logging.debug("A2D <%s>  Channels:" % a2dId)
                a2dChannels = em.GetA2DChannels(a2dId)
                logging.debug(a2dChannels)
                assert a2dChannels == xml_a2d_channels[a2dId]
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    def test_XML_SMM(self, em):
        try:
            em.ConfigUnload()
            em.ConfigLoad(dir + '\..\\resources\em_xml_test_parsing.xml')

            Smms = em.GetSMMs()
            assert Smms == xml_smms
            for smmId in Smms:
                logging.debug("SMM <%s>  Channels:" % smmId)
                smmChannels = em.GetSMMChannels(smmId)
                logging.debug(smmChannels)
                assert smmChannels == xml_smm_channels[smmId]
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False
    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_test_Init(self, em):
        try:
            Init(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_ReadWrite(self, em):
        try:
            ReadWrite(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_Power(self, em):
        try:
            Power(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_SetElectricalManagementGet(self, em):
        try:
            SetElectricalManagementGet(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_SetElectricalManagementSet(self, em):
        try:
            SetElectricalManagementSet(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_SetVdd_PMBusValueSet(self, em):
        try:

            SetVdd_PMBusValue(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_GetIdd_PMBusValue(self, em):
        try:

            value = GetIdd_PMBusValue(em)
            logging.debug("IDD value = %s" % value)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_A2DRead(self, em):
        try:
            A2DRead(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_setLog_off(self, em):
        try:
            setLog_off(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_setLog_on(self, em):
        try:
            setLog_on(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_A2DRead_repeat(self, em):
        try:
            A2DRead_repeat(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False),"DUT, Connection Failed")
    def test_disconnect(self, em):
        try:
            disconnect(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False

    @data(em)
    @unittest.skipIf((DUT is False), "DUT, Connection Failed")
    def test_disconnect_repeat(self, em):
        try:
            disconnect_repeat(em)
        except Exception as e:
            logging.debug("Exception:" + str(e))
            assert False


if __name__ == '__main__':
    unittest.main()

