# from __future__ import print_function
from inspect import getfile, currentframe
from builtins import range, str
import sys
from os import path
sys.path.append( path.dirname( path.dirname( path.abspath(__file__) ) ) )

from Marvell.EMClientPy.src.EMClientFactory import *
#from Marvell.EMClientPy.src.enumEM import *
import time
dir = path.dirname(path.abspath(getfile(currentframe())))  # script directory

DEBUG = True
def Init( em):
    em.configUnload()
    em.configLoad(dir + '\..\\resources\em_hex_raven_no_summit_support_ps.xml') #change xml for connected device
    #em.SetI2cInterface(I2cInterfaceEnum.I2C_USB)
    em.SetI2cSettings(22495, 30, 1, 10, None, 0)



def ReadWrite(em):

    read1 = em.EmGeneralReadGet(34 * 2, 0, 0, 1)
    em.EmGeneralReadSet(34 * 2, 0, 0, 1, 6)
    read2 = em.EmGeneralReadGet(34 * 2, 0, 0, 3)

def Power(em):
    em.DutPwr(1) # off
    em.DutPwr(0) # on

def SetElectricalManagementGet(em):
    IsFinished = False

    print("SetElectricalManagementGet")
    while (IsFinished is False):
        result = em.SetElectricalManagementGetTableEntry()

        IsFinished = result["IsFinished"]
        smmCur = result["smmCur"]
        description = result["description"]

        if (IsFinished == 0):
            print(result)
            print("%s: %s"% (description, smmCur))



def SetElectricalManagementSet(em):
    em.SetElectricalManagementSetTableEntry(0, 1, 2, 0, 930)


def SetVdd_PMBusValue(em):
    em.SetVdd_PMBusValue(0, 850)
    time.sleep(2)

    em.SetVdd_PMBusValue(0, 800)
    time.sleep(2)

    em.SetVdd_PMBusValue(0, 750)
    time.sleep(2)


def GetIdd_PMBusValue(em):
    value = em.GetIdd_PMBusValue(0)
    print("IDD value = %s" % value)

def SetPLLVoltageControl(em):
    em.SetPLLVoltageControl(0, 950)#bit[14:15] = 00
    time.sleep(2)

    em.SetPLLVoltageControl(0, 1000)#bit[14:15] = 01
    time.sleep(2)

    em.SetPLLVoltageControl(0, 850)#bit[14:15] = 10
    time.sleep(2)

    em.SetPLLVoltageControl(0, 900)#bit[14:15] = 11
    time.sleep(2)

def A2DRead(em):
    ids = em.GetA2Ds()
    smm_ids = em.GetSMMs()

    print("A2D")
    for i in range(0, len(ids)):
        id = ids[i]
        channels = em.GetA2DChannels(id)
        for j in range(0,len(channels)):

            #if (id == 2 && channels[j] == 9)
            result = em.A2DRead(id, channels[j])

            print("%s: %s %s" %(result["name"], result["value"], result["measureType"]))


def setLog_off(em):
    em.setLog(0)

def setLog_on(em):
    em.setLog(1)

def A2DRead_repeat(em):
    for i in range(0, 10):

        result = em.A2DRead(2, 7)

        print("A2D read = %s" % result["value"])

        time.sleep(0.1)

def disconnect(em):
    em.Disconnect()

def disconnect_repeat(em):
    for i in range(0, 10):

        Init(em)
        disconnect(em)

def main_EMAPI_onBoard():
    try:
        em = EMClientFactory.getEM_CPPInstance()
    except:
        raise Exception("EM Client Connection Failed! - test not started.")

    errorsCount = 0
    test_flow = setLog_off,\
            Init, \
            setLog_on, \
            ReadWrite,\
            Power,\
            SetElectricalManagementGet,\
            SetElectricalManagementSet,\
            SetElectricalManagementGet,\
            SetVdd_PMBusValue,\
            GetIdd_PMBusValue, \
            SetPLLVoltageControl,\
            A2DRead_repeat,\
            SetElectricalManagementGet,\
            A2DRead,\
            disconnect,\
            disconnect_repeat

    for func in test_flow:
        try:
            func(em)
        except Exception as e:
            errorsCount += 1
            print("----- ERROR: " + str(e))



    print("Done with %s errors." %errorsCount)


def debug():
    try:
        em = EMClientFactory.getEM_CPPInstance()

        em.configUnload()
        #m.configLoad('c:\\tmp\\em_hex_raven_no_summit_pll_test.xml')
        em.configLoad('C:\\tmp\\EM test\\FalconZ2_QSFPDD_V01_wPMBus_NoSummit_converted.xml')

        # em.SetI2cInterface(I2cInterfaceEnum.I2C_USB)
        # em.SetI2cSettings(2804, 50, 1, 30, None, 0)

        #GetIdd_PMBusValue(em)
        SetVdd_PMBusValue(em)
        #em.SetPLLVoltageControl(0, 950)
        #em.SetPLLVoltageControl(0, 1000)
        #em.SetPLLVoltageControl(0, 850)
        #em.SetPLLVoltageControl(0, 900)

        # SetElectricalManagementGet(em)
        # print em.SetElectricalManagementGetTable()
        # em.SetElectricalManagementSetTableEntry(0, 1, 0, 0, 3200)



    except Exception as e:
        print("Debug: " + str(e))


if __name__ == "__main__":
    if not DEBUG:
        main_EMAPI_onBoard()
    else:
        debug()
        print ("Done!")