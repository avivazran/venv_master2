# from __future__ import print_function
# from __future__ import absolute_import

# from Marvell.EMClientPy.EMAPI_tests.test_EMAPI_onBoard import *
# from Marvell.EMClientPy.EMAPI_tests.debug_EMAPI_XMLParsing import *

import os
import sys
from os import path

from Marvell.EMClientPy.src.Common.Types import I2cInterfaceEnum
from Marvell.EMClientPy.src.EMClientFactory import EMClientFactory

sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

import os

# from Marvell.EMClientPy.src.Common.Types import BoardPowerModeEnum
# import os
# import importlib
# importlib.import_module("test_EMAPI_onBoard")
# importlib.import_module("test_EMAPI_XMLParsing")
import time
from inspect import getfile, currentframe

# XML_FILE = r"C:\Active_Projects\EM\xml\AC5XDB_EM_wPMbus_Rev_1_0_3_converted.xml"
# from Marvell.EMClientPy.src.Common.Types import I2cInterfaceEnum
# from Marvell.EMClientPy.src.EMClientFactory import EMClientFactory

XML_FILE = r"C:\Git\Python_EM_Client\Marvell\EMClientPy\src\xmlParser\resources\em_xml_example_two_A2D.xml"
# XML_FILE = r"C:\Git\Python_EM_Client\Marvell\EMClientPy\src\xmlParser\resources\em_xml_example.xml"
XML_FILE_AC5P = r"C:\temp\xml\Hawk_V01_PMBus_New_Format_Ver1_3.xml"
XML_FILE_IML = r"C:\temp\xml\IM_L_DB_EM_wPMbus_Rev_1_0_2_converted.xml"
# XML_FILE_IML = XML_FILE_AC5P = XML_FILE
XML_FILE_TL10 = r"C:\temp\TL10\EM\TL10DB_Rev03_XML.xml"
XML_FILE_TL10_ClkSync = r"C:\temp\TL10\EM\TL10DB_Rev03_XML_ClkSync.xml"

SUB20 = 0x8367

IP2 = "10.4.50.3:23"
IP3 = "10.4.53.104:23"

DUT = False
Debug_Mode = True

dir = os.path.dirname(os.path.abspath(getfile(currentframe())))  # script directory


def Debug():
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_AC5P)

        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB)
        em.SetI2cSettings(SUB20)

        # plds = em.GetPLDs()
        # pld_modes = em.GetPLDModes(plds[0])
        # print(plds, pld_modes)
        # em.SetFanHeaterControlMode(plds[0], pld_modes[1])
        # print("done")
        # return
        value1 = em.GetVdd_PMBusValue(0)

        temp0 = em.GetTemperature(0, 0)
        try:
            temp1 = em.GetTemperature(0, 1)
        except Exception as e:
            str(e)
        temp2 = em.GetTemperature(0, 2)
        try:
            em.GetTemperature(0, 3)
        except Exception as e:
            str(e)
        # sub20Ids= em.GetSub20IdNumbers()

        # em.SetI2cInterface(1)
        # em.SetI2cSettings(22495, 30, 1, 10, None, 0)
        v2w = 900 if value1 == 950 else 950
        print(em.SetVdd_PMBusValue(0, v2w))
        print(em.GetVdd_PMBusValue(0))

        value1 = em.GetIdd_PMBusValue(0)
        value2 = em.GetIdd_PMBusValue(1)

        print("PS_{} current = {}, PS_{} current = {}".format(0, value1, 1, value2))
    except Exception as err:
        print(str(err))


def DebugMock():
    try:
        em = EMClientFactory.getEM_Instance(True)
        em.ConfigLoad(XML_FILE)

        a2d = em.A2DRead(0, 3)
        print("a2d default value is: " + str(a2d))

        em.SetVdd_PMBusValue(2, a2d + 5)
        print("after setting the a2d value to be " + str(a2d + 5) + " : ")

        print("a2d value is: " + str(em.A2DRead(0, 3)))
        print("Vdd_PMBus value is: " + str(em.GetVdd_PMBusValue(2)))

        em.BoardReset(0)
        print("after BoardReset: ")
        print("a2d value is: " + str(em.A2DRead(0, 3)))

        print("Vdd_PMBus value is: " + str(em.GetVdd_PMBusValue(2)))

        em.SetI2cInterface(1)
        em.SetI2cSettings(SUB20)

        plds = em.GetPLDs()
        if len(plds) > 0:
            pld_modes = em.GetPLDModes(plds[0])
            print(plds, pld_modes)
            em.SetFanHeaterControlMode(plds[0], pld_modes[1])
        print("done")
        return
        value1 = em.GetVdd_PMBusValue(0)

        temp0 = em.GetTemperature(0, 0)
        try:
            temp1 = em.GetTemperature(0, 1)
        except Exception as e:
            str(e)
        temp2 = em.GetTemperature(0, 2)
        try:
            em.GetTemperature(0, 3)
        except Exception as e:
            str(e)
        sub20Ids = em.GetSub20IdNumbers()

        # try:
        #     em.configLoad(dir + '\..\\resources\\Falcon-6_4T_EM_SMM_wPMbus_Rev_1_0_0_converted2.xml')
        # except Exception as e:
        #     str(e)
        #
        #
        # try:
        #     em.DutPwr(0)
        # except Exception as e:
        #     str(e)
        #
        # em.ConfigUnload()
        # em.ConfigLoad(dir + '\..\\resources\\FalconZ1_New_Converted.xml')
        #
        # try:
        #     em.DutPwr(0)
        # except Exception as e:
        #     str(e)

        # em.SetI2cInterface(1)
        # em.SetI2cSettings(22495, 30, 1, 10, None, 0)
        print(em.SetVdd_PMBusValue(0, 1155))
        print(em.GetVdd_PMBusValue(0))

        value1 = em.GetIdd_PMBusValue(0)
        value2 = em.GetIdd_PMBusValue(1)

        print("PS_{} current = {}, PS_{} current = {}".format(0, value1, 1, value2))
    except Exception as err:
        print(str(err))


def multi_em():
    try:

        em1 = EMClientFactory.getEM_CPPInstance()
        # time.sleep(5)

        em2 = EMClientFactory.getEM_CPPInstance()

        em1.configLoad(dir + '\..\\resources\\Falcon-6_4T_EM_SMM_wPMbus_Rev_1_0_0_converted.xml')
        # time.sleep(5)

        em2.configLoad(dir + '\..\\resources\\Falcon-6_4T_EM_SMM_wPMbus_Rev_1_0_0_converted.xml')
        # time.sleep(5)

        # em3 = EMClientFactory.getEM_CPPInstance()
        # em3.configLoad(dir + '\..\\resources\\Falcon-6_4T_EM_SMM_wPMbus_Rev_1_0_0_converted.xml')
        # em1.SetI2cInterface(1)
        # em1.SetI2cSettings(1745, 30, 1, 10, None, 0)

        em1.SetI2cInterface(1)
        em1.SetI2cSettings(0x1901, 30, 1, 10, None, 0)
        em2.SetI2cInterface(1)
        em2.SetI2cSettings(0x488F, 30, 1, 10, None, 0)

        em1.SetI2cInterface(1)
        em1.SetI2cSettings(0x1901, 30, 1, 10, None, 0)
        # time.sleep(5)
        em2.SetI2cInterface(1)
        em2.SetI2cSettings(0x488F, 30, 1, 10, None, 0)
        # time.sleep(5)

        em1.SetVdd_PMBusValue(3, 1113)

        em2.SetVdd_PMBusValue(3, 1113)

        em1.SetVdd_PMBusValue(3, 1067)

        em2.SetVdd_PMBusValue(3, 1067)
        em1.SetVdd_PMBusValue(3, 1080)

        em2.SetVdd_PMBusValue(3, 1080)

        print("Done!")
    except Exception as e:
        str(e)


def debug_sub20():
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_IML)

        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB)
        em.SetI2cSettings(SUB20)

        print(f"############################## GET A2d ##############################")
        a2d = em.A2DRead(0, 1)
        print(f"a2d value for id {0}, ch {1} is {a2d}")

        print(f"############################## GET VDD ##############################")
        value1 = em.GetVdd_PMBusValue(0)
        print(f"read vdd: PS_{0} current = {value1}")
        try:
            temp0 = em.GetTemperature(0, 0)
            print(f"GetTemperature tempsen {0}, ch {0}, value {temp0}C")

            temp1 = em.GetTemperature(0, 1)
            print(f"GetTemperature tempsen {0}, ch {1}, value {temp1}C")

            temp2 = em.GetTemperature(0, 2)
            print(f"GetTemperature tempsen {0}, ch {2}, value {temp2}C")

            temp3 = em.GetTemperature(0, 3)
            print(f"GetTemperature tempsen {0}, ch {3}, value {temp3}C")

        except Exception as e:
            print(f"Error read temperature: {str(e)}")
        sub20Ids = em.GetSub20IdNumbers()
        print(f"sub20 ids : {[hex(_id) for _id in sub20Ids]}")
        v2w = 900 if value1 == 950 else 950
        print(f"############################## SET VDD ##############################")
        em.SetVdd_PMBusValue(0, v2w)
        print(f"set vdd Ps_{0}, written data = {v2w}")

        print(f"############################## GET VDD ##############################")
        vr = em.GetVdd_PMBusValue(0)
        print(f"get vdd Ps_{0},  data = {vr}")

        value1 = em.GetIdd_PMBusValue(0)
        value2 = em.GetIdd_PMBusValue(1)
        print(f"############################## GET IDD ##############################")
        print(f"read idd: PS_{0} current = {value1}, PS_{1} current = {value2}")
    except Exception as err:
        print(str(err))


def debug_TL10_Idd():
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10)
        # em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        em.SetI2cSettings(SUB20)

        for i in range(10):
            try:
                value = em.GetIdd_PMBusValue(i)
                print(f"PS:{i} Idd:{value}")
            except Exception as e:
                print(f"PS:{i} Error Message: {str(e)}")
        print("Done")
    except Exception as err:
        print(str(err))


def debug_TL10_getVdd_mibs():
    IP1_TL10 = "10.4.53.11:23,root,Innovium123"
    IP2_TL10 = "10.4.65.184:23,root,Innovium123"

    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_CPU, 0)
        em.SetI2cSettings(IP2_TL10)

        for i in range(10):
            try:
                value = em.GetVdd_PMBusValue(i)
                print(f"PS:{i} Vdd:{value}")
            except Exception as e:
                print(f"PS:{i} Error Message: {str(e)}")

        for i in range(2):
            for ch in range(12):
                try:
                    value = em.A2DRead(i, ch)
                    print(f"a2d:{i},ch:{ch} value:{value}")
                except Exception as e:
                    print(f"a2d:{i} Error Message: {str(e)}")

        i = 5
        em.SetVdd_PMBusValue(i, 1070)
        value = em.GetVdd_PMBusValue(i)
        print(f"PS:{i} Vdd:{value}")

        # em.DutPwr(BoardPowerModeEnum.POWER_OFF)
        print("Done")
    except Exception as err:
        print(str(err))


def debug_TL10_board_reset_mibs():
    IP1_TL10 = "10.4.53.11:23,root,Innovium123"
    IP2_TL10 = "10.4.65.184:23,root,Innovium123"

    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_CPU, 1)
        em.SetI2cSettings(IP2_TL10)
        em.BoardReset(1000)
        print("Done")
    except Exception as err:
        print(str(err))


def debug_TL10_getVdd():
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        em.SetI2cSettings(SUB20)

        for i in range(10):
            try:
                value = em.GetVdd_PMBusValue(i)
                print(f"PS:{i} Vdd:{value}")
            except Exception as e:
                print(f"PS:{i} Error Message: {str(e)}")
        print("Done")
    except Exception as err:
        print(str(err))


def debug_TL10_setVdd():
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        em.SetI2cSettings(SUB20)

        em.SetVdd_PMBusValue(7, 1150)

        print("Done")
    except Exception as err:
        print(str(err))


def debug_TL10():
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 1)
        em.SetI2cSettings(SUB20)
        em.SetVdd_PMBusValue(8, 730)
        print("Done")
    except Exception as err:
        print(str(err))


def debug_mibs():
    try:
        psid = 0
        v2w = 930

        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_IML)

        em.SetI2cInterface(I2cInterfaceEnum.I2C_CPU, 1)
        # em.SetI2cSettings("10.5.217.207:23")
        em.SetI2cSettings(IP3)
        print(f"############################## GET A2d ##############################")
        a2d = em.A2DRead(0, 1)
        print(f"a2d value for id {0}, ch {1} is {a2d}")

        print(f"############################## GET VDD ##############################")
        value1 = em.GetVdd_PMBusValue(psid)
        print(f"read vdd: PS_{0} current = {value1}")
        print(f"############################## GET TMP ##############################")
        try:
            temp0 = em.GetTemperature(0, 0)
            print(f"GetTemperature tempsen {0}, ch {0}, value {temp0}C")

            temp1 = em.GetTemperature(0, 1)
            print(f"GetTemperature tempsen {0}, ch {1}, value {temp1}C")

            temp2 = em.GetTemperature(0, 2)
            print(f"GetTemperature tempsen {0}, ch {2}, value {temp2}C")

            temp3 = em.GetTemperature(0, 3)
            print(f"GetTemperature tempsen {0}, ch {3}, value {temp3}C")

        except Exception as e:
            print(f"Error read temperature: {str(e)}")
        try:
            sub20Ids = em.GetSub20IdNumbers()
            print(f"sub20 ids : {[hex(_id) for _id in sub20Ids]}")
        except Exception as e:
            print(f"Error while try to get sub20 ids. Error:{str(e)}")

        # v2w = 900 #if value1 == 950 else 950
        # psid =0

        print(f"############################## SET VDD ##############################")
        em.SetVdd_PMBusValue(psid, 930)
        print(f"set vdd Ps_{psid}, written data = {930}")

        print(f"############################## GET VDD ##############################")
        vr = em.GetVdd_PMBusValue(psid)
        print(f"get vdd Ps_{psid},  data = {vr}")

        print(f"############################## GET IDD ##############################")
        value1 = em.GetIdd_PMBusValue(0)
        value2 = em.GetIdd_PMBusValue(1)
        print(f"read idd: PS_{0} current = {value1}, PS_{1} current = {value2}")

        psid = 2
        v2w = 1160
        print(f"############################## SET VDD ##############################")
        em.SetVdd_PMBusValue(psid, v2w)
        print(f"set vdd Ps_{psid}, written data = {v2w}")

        # print(f"read idd: PS_{0} current = {value1}, PS_{1} current = {value2}")

        print(f"############################## GET A2d ##############################")
        a2d = em.A2DRead(0, 2)
        print(f"a2d value for id {0}, ch {2} is {a2d}")
        a2d = em.A2DRead(0, 3)
        print(f"a2d value for id {0}, ch {3} is {a2d}")
        print(f"############################## Reset   ##############################")
        em.BoardReset(500)
        print(f"############################## Done    ##############################")


    except Exception as err:
        print(str(err))


def debug_TL10_setClkSync():
    try:
        em = EMClientFactory.getEM_Instance()
        em.ConfigLoad(XML_FILE_TL10_ClkSync)
        em.SetI2cInterface(I2cInterfaceEnum.I2C_USB, 0)
        # em.SetI2cSettings(SUB20)

        em.SetClkSyncClock(0, 0, 100, 0)

        print("Done")
    except Exception as err:
        print(str(err))


# def main():
#     if Debug_Mode:
#         DebugMock()
#     else:
#         main_EMAPI_XMLParsing()
#         if DUT:
#             main_EMAPI_onBoard()

if __name__ == "__main__":
    # main()
    # debug_sub20()
    # debug_mibs()
    # multi_em()
    # DebugMock()
    # debug_TL10()
    # debug_TL10_Idd()
    # debug_TL10_setVdd()

    # debug_TL10_getVdd_mibs()
    # debug_TL10_board_reset_mibs()
    debug_TL10_setClkSync
