from abc import ABCMeta, abstractmethod
from Marvell.EMClientPy.src.Common.Types import I2cInterfaceEnum, I2CMode


class ABC_I2CWrapper:
    __metaclass__ = ABCMeta

    providerID: int = None
    connected: bool = False
    i2cInterface: I2cInterfaceEnum = I2cInterfaceEnum.I2C_USB

    def __init__(self):
        raise NotImplementedError('ERROR: Cant instantiate abstract class')

    @abstractmethod
    def InitI2cInterface(self, i2cInterface: I2cInterfaceEnum = I2cInterfaceEnum.I2C_USB):
        pass
    @abstractmethod
    def Connect(self, connection_id):
        pass

    @abstractmethod
    def Disconnect(self):
        pass

    @abstractmethod
    def Read(self, address, nBytes):
        pass

    @abstractmethod
    def Write(self, address, nBytes, data):
        pass

    @abstractmethod
    def SetI2CConfigParams(self, lptNum: int, frequency: int,  mode: I2CMode,  waitTime: int):
        pass

    @abstractmethod
    def GetConnectedSub20Ids(self):
        pass

    @abstractmethod
    def setLog(self, logLevel: int):
        pass

    @abstractmethod
    def genericRead(self, devAddr: int, subAddrValid: int, subAddr: int, nBytes: int):
        pass

    @abstractmethod
    def genericWrite(self, devAddr: int, subAddrValid: int, subAddr: int, nBytes: int, value: int):
        pass
