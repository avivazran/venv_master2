from builtins import object

import abc
#from future.utils import with_metaclass

# class EMIf(with_metaclass(abc.ABCMeta, object)):
class EMIf(abc.ABCMeta, object):
    @abc.abstractmethod
    def configLoad(self,  path):
        """
        :keyword:emConfigLoad
        :param path: const char*
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def configContentLoad(self,  xmlContent):
        """
        :keyword:emConfigContentLoad
        :param xmlContent: const char*
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def configUnload(self):
        """
        :keyword:emConfigUnload
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def SetI2cSettings(self,  lptNum, frequency,  mode,  waitTime,  i2c_host, i2c_port):
        """
        :keyword:SetI2cSettings
        :param lptNum: unsigned short
        :param frequency: long
        :param mode: unsigned long
        :param waitTime: unsigned long
        :param i2c_host: onst char*
        :param i2c_port: int
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def SetI2cInterface(self,  i2cInterface):
        """
        :keyword: SetI2cInterface
        :param i2cInterface: unsigned long
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def DutPwr(self,  action):
        """
        :keyword: DutPwr
        :param action: unsigned long
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def SetElectricalManagementSetTableEntry(self,  devId,  voltDiv,  smmId,  channel,  smmVoltageCh):
        """
        :keyword: SetElectricalManagementSetTableEntry
        :param devId: unsigned long
        :param voltDiv: unsigned long
        :param smmId: unsigned long
        :param channel: unsigned long
        :param smmVoltageCh: unsigned long
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def SetElectricalManagementGetTableEntry(self):
        """
        :keyword:SetElectricalManagementGetTableEntry
        :param voltDiv: unsigned long&
        :param smmId: unsigned long&
        :param intVref: long&
        :param uVref: unsigned long&
        :param channel: unsigned long&
        :param smmMin: unsigned long&
        :param smmCur: unsigned long&
        :param smmMax: unsigned long&
        :param IsFinished: bool&
        :param description: char **
        :return: dict pf { voltDiv,  smmId, intVref,  uVref,  channel,
                                          smmMin,  smmCur,  smmMax, IsFinished,  description}
        """
        pass

    @abc.abstractmethod
    def SetElectricalManagementGetTable(self):
        """
        :keyword:SetElectricalManagementGetTableEntry
        :param voltDiv: unsigned long&
        :param smmId: unsigned long&
        :param intVref: long&
        :param uVref: unsigned long&
        :param channel: unsigned long&
        :param smmMin: unsigned long&
        :param smmCur: unsigned long&
        :param smmMax: unsigned long&
        :param IsFinished: bool&
        :param description: char **
        :return: Array of dict from type: { voltDiv,  smmId, intVref,  uVref,  channel,
                                          smmMin,  smmCur,  smmMax, IsFinished,  description}
        """
        pass

    @abc.abstractmethod
    def BoardReset(self,  delay):
        """
        :keyword:BoardReset
        :param delay: unsigned long
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def ResetDUTviaI2c(self,  delay):
        """
        :keyword : ResetDUTviaI2c
        :param delay: nsigned long
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def SetMainPowerSettings(self,  action):
        """
        :keyword: SetMainPowerSettings
        :param action: unsigned long
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def EmGeneralReadSet(self,  devAddr, subAddrValid,  subAddr,  bytes,  value):
        """
        :keyword :
        :param devAddr: unsigned long
        :param subAddrValid: int
        :param subAddr: unsigned long
        :param bytes: unsigned long
        :param value: unsigned long
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def EmGeneralReadGet(self,  devAddr, subAddrValid,  subAddr,  bytes):
        """
        :keyword: EmGeneralReadGet
        :param devAddr: unsigned long
        :param subAddrValid: int
        :param subAddr: unsigned long
        :param bytes: unsigned long
        :return:EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def A2DRead(self,  id,  channel):
        """
        :keyword:A2DRead
        :param id: unsigned long
        :param channel: unsigned long
        :param name: char**
        :param measureType: char**
        :param value: long&
        :param rawValue: unsigned long&
        :return: dic of { name,  measureType, value,  rawValue}
        """
        pass

    @abc.abstractmethod
    def StoreVddAsDefaultToNVM(self,  address):
        """
        :keyword:
        :param address:unsigned int
        """
        pass

    @abc.abstractmethod
    def SetVdd_PMBusValue(self,  PsId,  value):
        """
        :keyword:
        :param PsId:unsigned long
        :param value: unsigned long
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def GetIdd_PMBusValue(self,  PsId):
        """
        :keyword:
        :param PsId:unsigned long
        :return: Idd value
        """
        pass

    @abc.abstractmethod
    def GetVdd_PMBusValue(self,  PsId):
        """
        :keyword:
        :param PsId:unsigned long
        :return: Vdd value
        """
        pass

    @abc.abstractmethod
    def PsInfoGet(self,  PsId):
        """
        :keyword:PsRead
        :param PsId: unsigned long
        :param name: char**
        :param measureType: char**
        :param minVol: unsigned int&
        :param maxVol: unsigned int&
        :param psAddress: unsigned int&
        :return: dic of { name, measureType, minVol, maxVol, address}
        """
        pass

    @abc.abstractmethod
    def SetPLLVoltageControl(self,  PsId,  value):
        """
        :keyword:
        :param PsId:unsigned long
        :param value: unsigned long
        :return: EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def GetTemperature(self, id,  channel):
        """
        :keyword:
        :param id:unsigned long
        :param channel: unsigned long
        :return: Temperature value (double)
        """
        pass

    @abc.abstractmethod
    def GetSub20IdNumbers(self):
        """
        :keyword :EMALGO_API emGetSub20IdNumbers(int **ids, int *length)
        :return: int[]
        """
        pass

    @abc.abstractmethod
    def GetA2Ds(self):
        """
        :keyword :EMALGO_API emGetA2Ds(int **ids, int *length)
        :return: int[]
        """
        pass

    @abc.abstractmethod
    def GetPSs(self):
        """
        :keyword :EMALGO_API emGetPSs(int **ids, int *length)
        :return: int[]
        """
        pass

    @abc.abstractmethod
    def GetSMMs(self):
        """
        :keyword :	EMALGO_API emGetSMMs(int **ids, int *length);

        :return: int[]
        """
        pass

    @abc.abstractmethod
    def GetA2DChannels(self, id):
        """
        :keyword : 	EMALGO_API emGetA2DChannels(int id, int **channels, int *length);

        :param id:
        :return: int[]
        """
        pass

    @abc.abstractmethod
    def GetSMMChannels(self, id):
        """
        :keyword :	EMALGO_API emGetSMMChannels(int id, int **channels, int *length);

        :param id:
        :return: int[]
        """
        pass

    @abc.abstractmethod
    def setLog(self, log_level):
        """
        :keyword: emSetLog
        :param log_level: int
        :return:  EMALGO_API (int)
        """
        pass

    @abc.abstractmethod
    def Disconnect(self):
        """
        :keyword : emDisconnect
        :return:  EMALGO_API (int)
        """
        pass
