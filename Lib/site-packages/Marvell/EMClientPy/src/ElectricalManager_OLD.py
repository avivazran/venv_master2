# from __future__ import absolute_import
from .EMIf_OLD import EMIf
import inspect, ctypes
from ctypes import byref
import sys, traceback


class ElectricalManager(EMIf):
    xml = None


    def __init__(self, api):
        self.EMAPI = api

    def _getLastError(self):
            EmWrap_getLastError = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)
            errors = ctypes.c_char_p(b"")
            ret = EmWrap_getLastError(ctypes.byref(errors))

            return errors.value.decode()

    def _checkResult(self, ret):
        if (ret != 0):

            ts = inspect.stack()
            error = self._getLastError()
            #raise Exc self.EMAPI.getAPIFuncExeeption("error in EM API %s. result=%s, error=%s" % (ts[1][3], ret, error))
            raise Exception("error in EM API %s. result=%s, error=%s" % (ts[1][3], ret, error))

    def _getArrayFromIntPtr(self, ptr, length):
        EmWrap_emFreeMemory = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)
        values = ptr[0:length]
        ret = EmWrap_emFreeMemory(ptr)
        self._checkResult(ret)
        return values

    def configLoad(self,  path):
        EmWrap_configLoad = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)
        ret = EmWrap_configLoad(path.encode())
        self._checkResult(ret)

    def configContentLoad(self, content):
        EmWrap_configContentLoad = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)
        ret = EmWrap_configContentLoad(content.encode())
        self._checkResult(ret)

    def configUnload(self):
        EmWrap_configUnload = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)
        ret = EmWrap_configUnload()
        self._checkResult(ret)

    def SetI2cSettings(self, lptNum, frequency,  mode,  waitTime,  i2c_host, i2c_port):
        EmWrap_SetI2cSettings = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_SetI2cSettings(lptNum, frequency,  mode,  waitTime,  i2c_host, i2c_port)
        self._checkResult(ret)

    def SetI2cInterface(self, i2cInterface):
        EmWrap_SetI2cInterface = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_SetI2cInterface(i2cInterface)
        self._checkResult(ret)

    def DutPwr(self, action):
        EmWrap_DutPwr = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_DutPwr(action)
        self._checkResult(ret)

    def SetElectricalManagementSetTableEntry(self,  devId,  voltDiv,  smmId,  channel,
                                             smmVoltageCh):
        EmWrap_SetElectricalManagementSetTableEntry = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)
        ret = EmWrap_SetElectricalManagementSetTableEntry(devId,  voltDiv,  smmId,  channel,
                                             smmVoltageCh)
        self._checkResult(ret)

    def SetElectricalManagementGetTable(self):
        ret_table = []
        is_finished = False

        while is_finished is False:
            entry = self.SetElectricalManagementGetTableEntry()
            is_finished = entry["IsFinished"]
            if not is_finished:
                ret_table.append(entry)

        return ret_table

    def SetElectricalManagementGetTableEntry(self):
        EmWrap_SetElectricalManagementGetTableEntry = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        voltDiv = ctypes.c_uint(0)
        smmId = ctypes.c_uint(0)
        intVref = ctypes.c_int(0)
        uVref = ctypes.c_uint(0)
        channel = ctypes.c_uint(0)
        smmMin = ctypes.c_uint(0)
        smmCur = ctypes.c_uint(0)
        smmMax = ctypes.c_uint(0)
        IsFinished = ctypes.c_bool(False)
        description = ctypes.c_char_p(b"")


        ret = EmWrap_SetElectricalManagementGetTableEntry(byref(voltDiv), byref(smmId), byref(intVref), byref(uVref),
                                                  byref(channel),byref(smmMin), byref(smmCur), byref(smmMax),
                                                  byref(IsFinished), byref(description))
        self._checkResult(ret)

        return {"voltDiv": voltDiv.value, "smmId": smmId.value, "intVref": intVref.value, "uVref": uVref.value,
                "channel": channel.value, "smmMin": smmMin.value, "smmCur": smmCur.value,
                "smmMax": smmMax.value, "IsFinished": IsFinished.value, "description": description.value.decode()}


    def BoardReset(self,  delay):
        EmWrap_BoardReset = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_BoardReset(delay)
        self._checkResult(ret)

    def ResetDUTviaI2c(self,  delay):
        EmWrap_ResetDUTviaI2c = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_ResetDUTviaI2c(delay)
        self._checkResult(ret)

    def SetMainPowerSettings(self,  action):
        EmWrap_SetMainPowerSettings = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_SetMainPowerSettings(action)
        self._checkResult(ret)

    def EmGeneralReadSet(self,  devAddr, subAddrValid,  subAddr,  bytes,  value):
        EmWrap_EmGeneralReadSet = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_EmGeneralReadSet(devAddr, subAddrValid,  subAddr,  bytes,  value)
        self._checkResult(ret)

    def EmGeneralReadGet(self,  devAddr, subAddrValid,  subAddr,  bytes):
        EmWrap_EmGeneralReadGet = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)
        value = ctypes.c_uint(0)
        ret = EmWrap_EmGeneralReadGet(devAddr, subAddrValid,  subAddr,  bytes, ctypes.byref(value))
        self._checkResult(ret)
        return value.value

    def A2DRead(self,  id,  channel):
        EmWrap_A2DRead = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        name = ctypes.c_char_p(b"")
        measureType = ctypes.c_char_p(b"")
        value = ctypes.c_long(0)
        rawValue = ctypes.c_long(0)

        ret = EmWrap_A2DRead(id,  channel,  byref(name),  byref(measureType), byref(value),  byref(rawValue))
        self._checkResult(ret)

        return {"name": name.value.decode(), "measureType": measureType.value.decode(), "value": value.value, "rawValue": rawValue.value}


    def StoreVddAsDefaultToNVM(self,  address):
        EmWrap_StoreVddAsDefaultToNVM = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)
        ret = EmWrap_StoreVddAsDefaultToNVM(address)
        self._checkResult(ret)

    def SetVdd_PMBusValue(self, PsId,  value):
        EmWrap_SetVdd_PMBusValue = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_SetVdd_PMBusValue(PsId, value)
        self._checkResult(ret)

    def GetIdd_PMBusValue(self, PsId):
        EmWrap_GetIdd_PMBusValue = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)
        value = ctypes.c_double(0.0)
        ret = EmWrap_GetIdd_PMBusValue(PsId, ctypes.byref(value))
        self._checkResult(ret)
        return value.value

    def GetVdd_PMBusValue(self, PsId):
        EmWrap_GetVdd_PMBusValue = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)
        value = ctypes.c_double(0.0)
        ret = EmWrap_GetVdd_PMBusValue(PsId, ctypes.byref(value))
        self._checkResult(ret)
        return value.value

    def PsInfoGet(self,  PsId):
        EmWrap_PSInfoGet = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        name = ctypes.c_char_p(b"")
        measureType = ctypes.c_char_p(b"")
        minVol = ctypes.c_uint(0)
        maxVol = ctypes.c_uint(0)
        psAddress = ctypes.c_uint(0)

        ret = EmWrap_PSInfoGet(PsId, byref(name), byref(measureType), byref(minVol), byref(maxVol), byref(psAddress))
        self._checkResult(ret)
        return {
            "name": name.value.decode(),
            "measureType": measureType.value.decode(),
            "minVol": minVol.value,
            "maxVol": maxVol.value,
            "address": psAddress.value
        }

    def SetPLLVoltageControl(self, PsId, value):
        EmWrap_SetPLLVoltageControl = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_SetPLLVoltageControl(PsId, value)
        self._checkResult(ret)

    def GetTemperature(self, id,  channel):
        EmWrap_GetTemperature = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        value = ctypes.c_double(0.0)

        ret = EmWrap_GetTemperature(id,  channel,  byref(value))
        self._checkResult(ret)

        return value.value

    def GetSub20IdNumbers(self):
        ids = ctypes.POINTER(ctypes.c_int)()
        length = (ctypes.c_int)(0)

        EmWrap_GetSub20IdNumbers = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_GetSub20IdNumbers(ctypes.byref(ids), ctypes.byref(length))
        values = self._getArrayFromIntPtr(ids, length.value)
        self._checkResult(ret)
        return values

    def GetA2Ds(self):
        ids = ctypes.POINTER(ctypes.c_int)()
        length = (ctypes.c_int)(0)

        EmWrap_GetA2Ds = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_GetA2Ds(ctypes.byref(ids), ctypes.byref(length))
        values = self._getArrayFromIntPtr(ids, length.value)
        self._checkResult(ret)
        return values

    def GetPSs(self):
        ids = ctypes.POINTER(ctypes.c_int)()
        length = (ctypes.c_int)(0)

        EmWrap_GetPSs = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_GetPSs(ctypes.byref(ids), ctypes.byref(length))
        values = self._getArrayFromIntPtr(ids, length.value)
        self._checkResult(ret)
        return values

    def GetSMMs(self):
        ids = ctypes.POINTER(ctypes.c_int)()
        length = (ctypes.c_int)(0)

        EmWrap_GetSMMs = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_GetSMMs(ctypes.byref(ids), ctypes.byref(length))
        values = self._getArrayFromIntPtr(ids, length.value)
        self._checkResult(ret)
        # return ids[0:length.value]
        return values

    def GetA2DChannels(self, id):
        c_id = ctypes.c_int(id)
        channels = ctypes.POINTER(ctypes.c_int)()
        length = (ctypes.c_int)(0)

        EmWrap_GetSMMs = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_GetSMMs(c_id, ctypes.byref(channels), ctypes.byref(length))
        self._checkResult(ret)
        return channels[0:length.value]

    def GetSMMChannels(self, id):
        c_id = ctypes.c_int(id)
        channels = ctypes.POINTER(ctypes.c_int)()
        length = (ctypes.c_int)(0)

        EmWrap_GetSMMChannels = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_GetSMMChannels(c_id, ctypes.byref(channels), ctypes.byref(length))
        self._checkResult(ret)
        return channels[0:length.value]


    def setLog(self, log_level):
        EmWrap_setLog = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_setLog(log_level)
        self._checkResult(ret)

    def Disconnect(self):
        EmWrap_Disconnect = self.EMAPI.getAPIFuncExe(inspect.currentframe().f_code.co_name)

        ret = EmWrap_Disconnect()
        self._checkResult(ret)
