from abc import abstractmethod

class ABCElectricalManager(object):
    def __init__(self):
        raise NotImplementedError('ERROR: Cant instantiate abstract class')

    def ElectricalManagerError(self, apiName: str, e: Exception):
        msg = 'EM ERROR occurred in API \'' + apiName + '\'\n' + str(e)
        raise Exception(msg)

    @abstractmethod
    def ConfigLoad(self, path):
        pass

    @abstractmethod
    def ConfigContentLoad(self, xmlContent):
        pass

    @abstractmethod
    def ConfigUnload(self):
        pass

    @abstractmethod
    def SetI2cSettings(self, lptNum, frequency, mode, waitTime):
        pass

    @abstractmethod
    def SetI2cInterface(self, i2cInterface):
        pass

    @abstractmethod
    def SetElectricalManagementSetTableEntry(self, devId, voltDiv, smmId, channel, smmVoltageCh):
        pass

    @abstractmethod
    def SetElectricalManagementGetTableEntry(self):
        pass

    @abstractmethod
    def SetElectricalManagementGetTable(self):
        pass

    @abstractmethod
    def BoardReset(self, delay):
        pass

    @abstractmethod
    def ResetDUTviaI2c(self, delay):
        pass

    @abstractmethod
    def SetMainPowerSettings(self, action: str):
        pass

    @abstractmethod
    def EmGeneralReadSet(self, devAddr, subAddrValid, subAddr, nBytes, value):
        pass

    @abstractmethod
    def EmGeneralReadGet(self, devAddr, subAddrValid, subAddr, nBytes):
        pass

    @abstractmethod
    def A2DRead(self, a2dId, channel):
        pass

    # removed , need to check if it is still in use
    # @abstractmethod
    # def StoreVddAsDefaultToNVM(self, address):
    #     pass

    @abstractmethod
    def SetVdd_PMBusValue(self, psId, value):
        pass

    @abstractmethod
    def GetIdd_PMBusValue(self, psId):
        pass

    @abstractmethod
    def SetPLLVoltageControl(self, psId, value):
        pass

    @abstractmethod
    def GetVdd_PMBusValue(self, psId):
        pass

    @abstractmethod
    def PsInfoGet(self, psId):
        pass

    @abstractmethod
    def GetTemperature(self, tsenId, channel):
        pass

    @abstractmethod
    def GetSub20IdNumbers(self):
        pass

    @abstractmethod
    def GetA2Ds(self):
        pass

    @abstractmethod
    def GetPSs(self):
        pass

    @abstractmethod
    def GetSMMs(self):
        pass

    @abstractmethod
    def GetA2DChannels(self, a2dId):
        pass

    @abstractmethod
    def GetSMMChannels(self, smmId):
        pass

    @abstractmethod
    def setLog(self, log_level):
        pass

    @abstractmethod
    def Disconnect(self):
        pass

    @abstractmethod
    def GetPLDs(self):
        pass

    @abstractmethod
    def GetPLDModes(self, pldId):
        pass

    @abstractmethod
    def SetFanHeaterControlMode(self, pldId, modeNum):
        pass


