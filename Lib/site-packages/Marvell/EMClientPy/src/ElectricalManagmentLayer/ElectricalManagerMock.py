from Marvell.EMClientPy.src.ElectricalManagmentLayer.ABCElectricalManager import ABCElectricalManager
from Marvell.EMClientPy.src.ElectricalManagmentLayer.ElectricalManager import ElectricalManager
from Marvell.EMClientPy.src.ElectricalManagmentModels.ItemTypeElements.A2D import A2D


class BoardMock():
    def __init__(self):
        self.boardParams = {}
        # key is boardParamName (return value from getBoardParamName function),
        # value is dictionary with 'value' that is the param value, and 'info' that is em.PsInfoGet(psid) with 'psis'.
        # for example:
        # self.boardParams = {
        #   'A2D_3.3V_PP_2': {
        #       'value': 3400.0,
        #       'info': {
        #           'name': '3.3V_PP',
        #           'measureType': 'mV',
        #           'minVol': 2000.0,
        #           'maxVol': 3500.0,
        #           'address': 89,
        #           'defVol': 3300.0,
        #           'psis': 2
        #       }
        #   }
        # }
        self.em = ElectricalManager()

    def getBoardParamName(self, paramName: str, psid: int = None):
        if psid:
            return paramName + "_" + str(psid)
        else:  # for A2D we don't know the psid yet
            return "A2D" + "_" + paramName

    def getBoardParam(self, paramName: str, psid: int):
        boardParamName = self.getBoardParamName(paramName, psid)
        if boardParamName not in self.boardParams:
            defVal = 25 if "Temperature" == paramName else 0
            dic = self.em.PsInfoGet(psid)
            dic["psis"] = psid
            self.boardParams[boardParamName] = {"value": defVal, "info": dic}
        return self.boardParams[boardParamName]["value"]

    def setBoardParam(self, paramName: str, psid: int, value: int):
        boardParamName = self.getBoardParamName(paramName, psid)
        if boardParamName not in self.boardParams:
            dic = self.em.PsInfoGet(psid)
            dic["psis"] = psid
            self.boardParams[boardParamName] = {"value": value, "info": dic}
        else:
            self.boardParams[boardParamName]["value"] = value

    def setBoardA2DParam(self, a2dName: str, value):
        boardParamName = self.getBoardParamName(a2dName)
        boardParamNameExsist = [key for key in self.boardParams if boardParamName in key]
        if len(boardParamNameExsist) == 0:
            boardParamName = self.initBoardA2DParamData(a2dName)
        else:
            boardParamName = boardParamNameExsist[0]
        if self.boardParams[boardParamName]["info"]["minVol"] <= value <= self.boardParams[boardParamName]["info"][
            "maxVol"]:
            self.boardParams[boardParamName]["value"] = value
        else:
            raise Exception(
                f"EM ERROR occurred in API \'SetVdd_PMBusValue\'\nSetting the A2D value({value}) should be bigger then "
                f"min_vol({self.boardParams[boardParamName]['info']['minVol']}) and smaller then "
                f"max_val({self.boardParams[boardParamName]['info']['maxVol']}) from the xml ")

    def getBoardA2DParam(self, a2dName: str):
        boardParamName = self.getBoardParamName(a2dName)
        boardParamNameExsist = [key for key in self.boardParams if boardParamName in key]
        if len(boardParamNameExsist) == 0:
            boardParamName = self.initBoardA2DParamData(a2dName)
        else:
            boardParamName = boardParamNameExsist[0]
        return self.boardParams[boardParamName]["value"]

    def initBoardA2DParamData(self, a2dName):
        boardParamName = self.getBoardParamName(a2dName)
        for i in self.em.GetPSs():
            if self.em.PsInfoGet(i)['name'] == a2dName:
                boardParamName = self.getBoardParamName(boardParamName, i)
                dic = self.em.PsInfoGet(i)
                dic["psis"] = i
                self.boardParams[boardParamName] = {"value": dic["defVol"], "info": dic}
                break
        return boardParamName

    def resetToDefault(self):
        for paramName in self.boardParams:
            defVal = 0
            if "A2D" in paramName:
                defVal = self.boardParams[paramName]["info"]["defVol"]
            elif "Temperature" in paramName:
                defVal = 25
            self.boardParams[paramName]["value"] = defVal


class ElectricalManagerMock(ABCElectricalManager):
    def __init__(self):
        self.isConnected = True
        self.electricalManager = ElectricalManager()
        self.boardMock = BoardMock()
        self.BoardReset(0)

    def ConfigLoad(self, path):
        self.boardMock.em.ConfigLoad(path)
        self.boardMock.resetToDefault()
        # update boardMock according to the xml
        # the mock should resolve all the needed default values
        return self.electricalManager.ConfigLoad(path)

    def ConfigContentLoad(self, xmlContent):
        self.boardMock.em.ConfigContentLoad(xmlContent)
        return self.electricalManager.ConfigContentLoad(xmlContent)

    def ConfigUnload(self):
        self.boardMock.em.ConfigUnload()
        return self.electricalManager.ConfigUnload()

    def SetI2cSettings(self, lptNum=None, frequency=None, mode=None, waitTime=None):
        pass

    def SetI2cInterface(self, i2cInterface=None):
        # return self.electricalManager.SetI2cInterface(i2cInterface)
        pass

    def SetElectricalManagementSetTableEntry(self, devId, voltDiv, smmId, channel, smmVoltageCh):
        pass

    def SetElectricalManagementGetTableEntry(self):
        pass

    def SetElectricalManagementGetTable(self):
        pass

    def GetAc2DcPSs(self):
        pass

    def Ac2DcPsInfoGet(self, psId):
        pass

    def BoardReset(self, delay):
        # resolve to the default values
        self.boardMock.resetToDefault()

    def ResetDUTviaI2c(self, delay):
        # same as BoardReset
        # resolve to the default values
        self.boardMock.resetToDefault()

    def SetMainPowerSettings(self, action: str):
        pass

    def EmGeneralReadSet(self, devAddr, subAddrValid, subAddr, nBytes, value):
        pass

    def EmGeneralReadGet(self, devAddr, subAddrValid, subAddr, nBytes):
        pass

    def A2DRead(self, a2dId, channel):
        # if SetVdd_PMBusValue was used, read its input
        a2d = A2D._getA2DElement(self.electricalManager.xmlDB, a2dId)
        a2dName = a2d.GetChannel(channel).name
        return self.boardMock.getBoardA2DParam(a2dName)

    # def StoreVddAsDefaultToNVM(self, address):
    #     pass
    #

    def SetVdd_PMBusValue(self, psId, value):
        # self.boardMock.A2DRead  is  more coplex by the psId
        # self.boardMock.A2DRead = value # see A2DRead
        a2dName = self.electricalManager.PsInfoGet(psId)["name"]
        self.boardMock.setBoardA2DParam(a2dName, value)
        self.boardMock.setBoardParam("VddPMBus", psId, value)
        # set vdd PMBus // as the xml
        # if logically it is not correct, remove implementation and pass this function, and remove A2DRead function ass well

    def GetIdd_PMBusValue(self, psId):
        return self.boardMock.getBoardParam("IddPMBus", psId)

    # TODO - there is no setter for Idd?

    def GetTemp_DC2DC_PMBusValue(self, psId):
        return 0  # TODO: add to board mock if needed

    def GetTemp_AC2DC_PMBusValue(self, ac2dc_psId):
        return 0  # TODO: add to board mock if needed

    def SetPLLVoltageControl(self, psId, value):
        self.boardMock.setBoardParam("PLLVoltageControl", psId, value)

    # TODO - there is no getter for PLLVoltageControl?

    def GetVdd_PMBusValue(self, psId):
        return self.boardMock.getBoardParam("VddPMBus", psId)

    def PsInfoGet(self, psId):
        # from xml
        return self.electricalManager.PsInfoGet(psId)

    def GetTemperature(self, tsenId, channel):
        return self.boardMock.getBoardParam("Temperature", tsenId)  # TODO - what is the parameters ?

    def StoreVddToNVM(self, psId, factoryDeafult=False):
        return

    def GetSub20IdNumbers(self):
        pass

    def GetA2Ds(self):
        # from xml
        return self.electricalManager.GetA2Ds()

    def GetPSs(self):
        # from xml
        return self.electricalManager.GetPSs()

    def GetSMMs(self):
        # from xml
        return self.electricalManager.GetSMMs()

    def GetA2DChannels(self, a2dId):
        # from xml
        return self.electricalManager.GetA2DChannels(a2dId)

    def GetSMMChannels(self, smmId):
        # from xml
        return self.electricalManager.GetSMMChannels(smmId)

    def setLog(self, log_level):
        pass

    def Disconnect(self):
        self.isConnected = False

    def GetPLDs(self):
        # from xml
        return self.electricalManager.GetPLDs()

    def GetPLDModes(self, pldId):
        # from xml
        return self.electricalManager.GetPLDModes(pldId)

    def SetFanHeaterControlMode(self, pldId, modeNum):
        pass

    def SetPPMClock(self, clkSyncId, clkSyncCh, ppmValue):
        pass
