from Marvell.EMClientPy.src.ElectricalManagmentLayer.ABCElectricalManager import ABCElectricalManager
from Marvell.EMClientPy.src.ElectricalManagmentModels.ItemTypeElements.Ac2DcPS import Ac2DcPS
from Marvell.EMClientPy.src.ElectricalManagmentModels.ItemTypeElements.ClkSync import ClkSync
from Marvell.EMClientPy.src.xmlParser.emXML_Parser import XML_Parser
from Marvell.EMClientPy.src.Common.Types import I2CProviderType, I2CWrapperType
from Marvell.EMClientPy.src.Common.Constants import *
from Marvell.EMClientPy.src.I2CWrapperLayer.I2CWrapperFactory import I2CWrapperFactory
from Marvell.EMClientPy.src.I2CWrapperLayer.ABC_I2CWrapper import ABC_I2CWrapper
from Marvell.EMClientPy.src.ElectricalManagmentModels.Board_Model import Board
from Marvell.EMClientPy.src.ElectricalManagmentModels.ItemTypeElements.A2D import A2D
from Marvell.EMClientPy.src.ElectricalManagmentModels.ItemTypeElements.PS import PS
from Marvell.EMClientPy.src.ElectricalManagmentModels.ItemTypeElements.SMM import SMM
from Marvell.EMClientPy.src.ElectricalManagmentModels.ItemTypeElements.IO import IO
from Marvell.EMClientPy.src.ElectricalManagmentModels.ItemTypeElements.TSEN import TSEN
from Marvell.EMClientPy.src.ElectricalManagmentModels.ItemTypeElements.PLD import PLD
from Marvell.EMClientPy.src.I2CWrapperLayer.I2CWrapper import *


def check_XML(func):
    def inner(*args, **kwargs):
        if args[0].xmlDB == None:
            raise Exception("XML not loaded.")
        return func(*args, **kwargs)

    return inner

class ElectricalManager(ABCElectricalManager):
    xmlDB: Board = None
    If_i2c_wrapper: ABC_I2CWrapper = None

    def __init__(self, wrapperType=I2CWrapperType.I2CWrapper):
        self.If_i2c_wrapper = I2CWrapperFactory.Create(i2cWrapperType=wrapperType) # I2CWrapper()  # TODO: Change the name to be I2CWrapper #I2CProviderFactory.Create(providerType)
    # in ABCElectricalManager
    # def ElectricalManagerError(self, apiName: str, e: Exception):
    #     msg = 'EM ERROR occurred in API \'' + apiName + '\'\n' + str(e)
    #     raise Exception(msg)

    def Disconnect(self):
        try:
            self.If_i2c_wrapper.Disconnect()
        except Exception as e:
            self.ElectricalManagerError('Disconnect', e)

    """*********************************************************************************
    General APIs
    *********************************************************************************"""

    def ConfigLoad(self, path: str):
        try:
            self.xmlDB = XML_Parser(path=path)
            return GT_OK
        except Exception as e:
            self.ElectricalManagerError('ConfigLoad', e)

    def ConfigContentLoad(self, text):
        try:
            self.xmlDB = XML_Parser(text=text)
            return GT_OK
        except Exception as e:
            self.ElectricalManagerError('ConfigContentLoad', e)

    def ConfigUnload(self):
        try:
            self.xmlDB = None
            return GT_OK
        except Exception as e:
            self.ElectricalManagerError('ConfigUnload', e)

    def SetI2cInterface(self, i2cInterface: I2cInterfaceEnum = I2cInterfaceEnum.I2C_USB, set_log=0):
        try:
            self.If_i2c_wrapper.InitI2cInterface(i2cInterface)
            self.If_i2c_wrapper.i2cInterface = i2cInterface
            self.If_i2c_wrapper.setLog(set_log)

            return GT_OK
        except Exception as e:
            self.ElectricalManagerError('SetI2cInterface', e)

    def GetSub20IdNumbers(self):
        try:
            """
            There is code that doesn't use SetI2cInterface, so we need to initialize the I2C provider to be 'sub20'
            """
            if self.If_i2c_wrapper._i2c_interface is None:
                self.SetI2cInterface()

            return self.If_i2c_wrapper.GetConnectedSub20Ids()
        except Exception as e:
            self.ElectricalManagerError('GetSub20IdNumbers', e)

    def SetI2cSettings(self, lptNum=None, frequency=None, mode=None, waitTime=None):
        try:
            """
            There is code that doesn't use SetI2cInterface, so we need to initialize the I2C provider to be 'sub20'
            """
            if self.If_i2c_wrapper._i2c_interface is None:
                self.SetI2cInterface()

            self.If_i2c_wrapper.Connect(lptNum)
            if self.If_i2c_wrapper.i2cInterface == I2cInterfaceEnum.I2C_USB:
                self.If_i2c_wrapper.SetI2CConfigParams(lptNum, frequency, mode, waitTime)
            return GT_OK
        except Exception as e:
            self.ElectricalManagerError('SetI2cSettings', e)

    def EmGeneralReadSet(self, devAddr, subAddrValid, subAddr, nBytes, value):
        try:
            self.If_i2c_wrapper.genericWrite(devAddr << 1, subAddrValid, subAddr, nBytes, value)
        except Exception as e:
            self.ElectricalManagerError('EmGeneralReadSet', e)

    def EmGeneralReadGet(self, devAddr: int, subAddrValid: int, subAddr: int, nBytes: int):
        try:
            data = self.If_i2c_wrapper.genericRead(devAddr, subAddrValid, subAddr, nBytes)
            return data
        except Exception as e:
            self.ElectricalManagerError('EmGeneralReadGet', e)

    def setLog(self, logLevel: int):
        try:
            self.If_i2c_wrapper.setLog(logLevel)
        except Exception as e:
            self.ElectricalManagerError('setLog', e)

    def SetElectricalManagementSetTableEntry(self, devId, voltDiv, smmId, channel, smmVoltageCh):
        raise NotImplementedError('SetElectricalManagementSetTableEntry not implemented due to lack of use')

    def SetElectricalManagementGetTableEntry(self):
        raise NotImplementedError('SetElectricalManagementGetTableEntry not implemented due to lack of use')

    def SetElectricalManagementGetTable(self):
        raise NotImplementedError('SetElectricalManagementGetTable not implemented due to lack of use')

    """*********************************************************************************
    IO APIs
    *********************************************************************************"""

    @check_XML
    def DutPwr(self, action: BoardPowerModeEnum):
        try:
            IO.dutPwr(self.xmlDB, self.If_i2c_wrapper, action)
        except Exception as e:
            self.ElectricalManagerError('DutPwr', e)

    @check_XML
    def BoardReset(self, delay: int):
        try:
            IO.boardReset(self.xmlDB, self.If_i2c_wrapper, delay)
        except Exception as e:
            self.ElectricalManagerError('BoardReset', e)

    def ResetDUTviaI2c(self, delay: int):
        pass

    @check_XML
    def SetMainPowerSettings(self, action: BoardPowerModeEnum):
        try:
            IO.boardPwr(self.xmlDB, self.If_i2c_wrapper, action)
        except Exception as e:
            self.ElectricalManagerError('SetMainPowerSettings', e)

    """*********************************************************************************
    A2D APIs
    *********************************************************************************"""

    @check_XML
    def GetA2Ds(self):
        try:
            res = A2D.getA2DsIDs(self.xmlDB)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetA2Ds', e)

    @check_XML
    def GetA2DChannels(self, a2dId):
        try:
            res = A2D.getA2DChannelsNumbers(self.xmlDB, a2dId)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetA2DChannels', e)

    @check_XML
    def A2DRead(self, a2dId, a2dCh):
        try:
            res = A2D.readA2DValue(self.xmlDB, self.If_i2c_wrapper, a2dId, a2dCh)
            return res
        except Exception as e:
            self.ElectricalManagerError('A2DRead', e)

    """*********************************************************************************
    PSs APIs
    *********************************************************************************"""

    @check_XML
    def GetPSs(self):
        try:
            res = PS.getPSsIDs(self.xmlDB)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetPSs', e)

    @check_XML
    def PsInfoGet(self, psId):
        try:
            res = PS.getPSInfo(self.xmlDB,self.If_i2c_wrapper, psId)
            return res
        except Exception as e:
            self.ElectricalManagerError('PsInfoGet', e)

    @check_XML
    def GetAc2DcPSs(self):
        try:
            res = Ac2DcPS.getAc2DcPSsIDs(self.xmlDB)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetAc2DcPSs', e)

    @check_XML
    def Ac2DcPsInfoGet(self, psId):
        try:
            res = Ac2DcPS.getAc2DcPSInfo(self.xmlDB, psId)
            return res
        except Exception as e:
            self.ElectricalManagerError('Ac2DcPsInfoGet', e)


    @check_XML
    def SetVdd_PMBusValue(self, psId, value):
        try:
            PS.setVdd_PMBusValue(self.xmlDB, self.If_i2c_wrapper, psId, value)
        except Exception as e:
            self.ElectricalManagerError('SetVdd_PMBusValue', e)

    @check_XML
    def GetVdd_PMBusValue(self, psId):
        try:
            res = PS.getVdd_PMBusValue(self.xmlDB, self.If_i2c_wrapper, psId)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetVdd_PMBusValue', e)

    @check_XML
    def GetIdd_PMBusValue(self, psId):
        try:
            res = PS.getIdd_PMBusValue(self.xmlDB, self.If_i2c_wrapper, psId)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetIdd_PMBusValue', e)

    @check_XML
    def SetPLLVoltageControl(self, psId, value):
        try:
            PS.setPLLVoltageControl(self.xmlDB, self.If_i2c_wrapper, psId, value)
        except Exception as e:
            self.ElectricalManagerError('SetPLLVoltageControl', e)

    @check_XML
    def GetTemp_DC2DC_PMBusValue(self, psId):
        try:
            res = PS.getTemp_DC2DC_PMBusValue(self.xmlDB, self.If_i2c_wrapper, psId)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetTemp_DC2DC_PMBusValue', e)

    @check_XML
    def GetTemp_AC2DC_PMBusValue(self, ac2dc_psId):
        try:
            res = Ac2DcPS.getTemp_AC2DC_PMBusValue(self.xmlDB, self.If_i2c_wrapper, ac2dc_psId)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetTemp_AC2DC_PMBusValue', e)

    @check_XML
    def StoreVddToNVM(self, psId, factoryDeafult=False):
        try:
            PS.storeVddToNVM(self.xmlDB, self.If_i2c_wrapper, psId, factoryDeafult)
        except Exception as e:
            self.ElectricalManagerError('StoreVddToNVM', e)


    """*********************************************************************************
    SMM APIs
    *********************************************************************************"""

    @check_XML
    def GetSMMs(self):
        try:
            res = SMM.getSMMsIDs(self.xmlDB)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetSMMs', e)

    @check_XML
    def GetSMMChannels(self, smmId):
        try:
            res = SMM.getSMMChannelsNumbers(self.xmlDB, smmId)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetSMMChannels', e)

    """*********************************************************************************
    TSEN APIs
    *********************************************************************************"""

    @check_XML
    def GetTemperature(self, tsenId, tsenCh):
        try:
            res = TSEN.getTemperature(self.xmlDB, self.If_i2c_wrapper, tsenId, tsenCh)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetTemperature', e)

    """*********************************************************************************
    PLD APIs
    *********************************************************************************"""

    @check_XML
    def SetFanHeaterControlMode(self, pldId, modeNum):
        try:
            res = PLD.SetFanHeaterControlMode(self.xmlDB, self.If_i2c_wrapper, pldId, modeNum)
            return res
        except Exception as e:
            self.ElectricalManagerError('SetFanHeaterControlMode', e)

    @check_XML
    def GetPLDs(self):
        try:
            res = PLD.getPLDsIDs(self.xmlDB)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetPLDs', e)

    @check_XML
    def GetPLDModes(self, pldId):
        try:
            res = PLD.getPLDModesNumbers(self.xmlDB, pldId)
            return res
        except Exception as e:
            self.ElectricalManagerError('GetPLDModes', e)

    """*********************************************************************************
    ClkSync APIs
    *********************************************************************************"""
    @check_XML
    def SetPPMClock(self, clkSyncId, clkSyncCh, ppmValue):
        try:
            res = ClkSync.SetPPMClock(self.xmlDB,self.If_i2c_wrapper, clkSyncId, clkSyncCh, ppmValue)
            return res
        except Exception as e:
            self.ElectricalManagerError('SetPPMClock', e)
