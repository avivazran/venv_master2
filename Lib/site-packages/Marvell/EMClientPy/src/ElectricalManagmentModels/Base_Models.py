# from __future__ import annotations

from abc import ABCMeta
from .Models_Validator import *
from Marvell.EMClientPy.src.I2CWrapperLayer.ABC_I2CWrapper import ABC_I2CWrapper


class EmModel:
    pass


class EmModel(object):
    __rootElem = None
    _parent: EmModel = None
    _connId = 0
    _openConnId = -1

    __metaclass__ = ABCMeta

    def __init__(self, rootElem, parent, connId):
        self.__rootElem = rootElem
        self.setParent(parent)
        self.setConnId(connId)

    def getParent(self):
        return self._parent

    def setParent(self, parent: EmModel):
        self._parent = parent

    def getConnId(self):
        return self._connId

    def setConnId(self, connId: int):
        self._connId = connId

    def getOpenConnId(self):
        return self._openConnId

    def setOpenConnId(self, connId: int):
        self._openConnId = connId

    def getAttribute(self, attrName: str):
        return self.__rootElem.attrib[attrName]

    def getFirstChildElement(self, tag=None, attr='text'):
        elements = self.getChildrenElements(tag)
        result = None
        if len(elements) > 0:
            result = elements[0]
            if attr is not None:
                result = getattr(result, attr)
        return result

    def getChildrenElements(self, tag=None, _max=maxsize, _min=0):
        elementsArr = self.__rootElem.findall('*')
        if tag is not None:
            elementsArr = self.__rootElem.findall(str(tag))

        Models_Validator.arrayLength(elementsArr, _max, _min)
        return elementsArr


class VoltageControl(EmModel):
    min_vol = 0.0
    max_vol = 0.0
    def_vol = 0.0

    def __init__(self, elm, parent, connId):
        super(VoltageControl, self).__init__(elm, parent, connId)
        if elm is not None:
            self.min_vol = Models_Validator.voltType(self.getFirstChildElement('min_vol'))
            self.max_vol = Models_Validator.voltType(self.getFirstChildElement('max_vol'))
            self.def_vol = Models_Validator.voltType(self.getFirstChildElement('def_vol'))

    def isVoltageInValidRange(self, value: float) -> bool:
        if self.min_vol <= value <= self.max_vol:
            return True
        return False


class ItemType:
    pass


class ItemType(EmModel):
    _itemType: ItemType = None
    _provider: ABC_I2CWrapper = None
    _board: None
    id = 0,
    addr: int = -1

    __metaclass__ = ABCMeta

    def __init__(self, elm, parent: EmModel, connId: int, itemType: ItemType):
        super(ItemType, self).__init__(elm, parent, connId)
        if elm is not None:
            self._setItemType(itemType)
            self.id = int(self.getFirstChildElement("id"))
            self.addr = Models_Validator.addrType(self.getFirstChildElement("addr"))

    def _setItemType(self, _type: ItemType):
        self._itemType = _type

    def getItemType(self) -> ItemType:
        if self._itemType is None:
            if self.__rootElem:
                self._itemType = self.getElmType(self.__rootElem)
            else:
                raise Exception('ItemType element was not initialized properly')
        return self._itemType

    def getProvider(self):
        if not self._provider:
            raise Exception('Provider is not set')
        return self._provider

    def setProvider(self, provider: ABC_I2CWrapper):
        self._provider = provider

    @staticmethod
    def getElmType(elm) -> ItemType:
        result = ItemTypeEnum.NA
        attrib = dict(elm.attrib)  # dict of attributes
        for key, val in attrib.items():
            if str(key).endswith('}type'):
                if val == 'mux':
                    result = ItemTypeEnum.MUX
                elif val == 'ps':
                    result = ItemTypeEnum.PS
                elif val == 'io':
                    result = ItemTypeEnum.IO
                elif val == 'a2d':
                    result = ItemTypeEnum.A2D
                elif val == 'smm':
                    result = ItemTypeEnum.SMM
                elif val == 'tsen':
                    result = ItemTypeEnum.TSEN
                elif val == 'pld':
                    result = ItemTypeEnum.PLD
                elif val == 'clkSync':
                    result = ItemTypeEnum.ClkSync
                elif val == 'ac2dcPs':
                    result = ItemTypeEnum.Ac2DcPS
                break
        return result


class VrefElement(ItemType):
    vref = ''
    vref_vol = 0.0

    def __init__(self, elm, parent, connId, itemType: ItemType):
        super(VrefElement, self).__init__(elm, parent, connId, itemType)
        if elm is not None:
            self.vref = Models_Validator.vref(self.getFirstChildElement('vref'))
            self.vref_vol = Models_Validator.voltType(self.getFirstChildElement('vref_vol'))
