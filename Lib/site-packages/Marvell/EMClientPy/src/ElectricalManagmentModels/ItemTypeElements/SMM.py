# from __future__ import annotations

from Marvell.EMClientPy.src.ElectricalManagmentModels.Base_Models import EmModel, VrefElement
from Marvell.EMClientPy.src.ElectricalManagmentModels.Models_Validator import Models_Validator
from Marvell.EMClientPy.src.ElectricalManagmentModels.Model_Enums import ItemTypeEnum
from typing import List

class SMM:
    pass

class SMM(VrefElement):
    valid = None
    start = None
    ch = None

    def __init__(self, elm, parent, connId):
        super(SMM, self).__init__(elm, parent, connId, ItemTypeEnum.SMM)
        if elm is not None:
            self.valid = self.getFirstChildElement('valid')
            self.start = Models_Validator.start(self.getFirstChildElement('start'))
            ch = self.getChildrenElements('ch', 2, 2)
            self.ch = []
            for c in ch:
                self.ch.append(SMM_Ch(c, self, 0))

    @staticmethod
    def _getSMMsElements(board) -> List[SMM]:
        return board.getItemElementsByType(ItemTypeEnum.SMM)

    @staticmethod
    def _getSMMElement(board, smmId) -> SMM:
        return board.getItemElementById(ItemTypeEnum.SMM, smmId)

    def getChannelNumbers(self) -> List[int]:
        res: List[int] = []
        for ch in self.ch:
            res.append(ch.num)
        return res

    @staticmethod
    def getSMMsIDs(board) -> List[int]:
        res: List[int] = []
        for smm in SMM._getSMMsElements(board):
            res.append(smm.id)
        return res

    @staticmethod
    def getSMMChannelsNumbers(board, smmId) -> List[int]:
        smm = SMM._getSMMElement(board, smmId)
        return smm.getChannelNumbers()

class SMM_Ch(EmModel):
    desc = ''
    min_vol = 0.0
    max_vol = 0.0
    def_vol = 0.0
    num = 0

    def __init__(self, elm, parent, connId):
        super(SMM_Ch, self).__init__(elm, parent, connId)
        if elm is not None:
            self.min_vol = Models_Validator.voltType(self.getFirstChildElement('min_vol'))
            self.max_vol = Models_Validator.voltType(self.getFirstChildElement('max_vol'))
            self.def_vol = Models_Validator.voltType(self.getFirstChildElement('def_vol'))
            self.num = Models_Validator.nonNegativeInteger(self.getAttribute('num'), 1)
