# from __future__ import annotations
import re
from math import pow
from time import sleep

from Marvell.EMClientPy.src.ElectricalManagmentModels.Base_Models import VoltageControl, ItemType
from Marvell.EMClientPy.src.ElectricalManagmentModels.Models_Validator import Models_Validator
from Marvell.EMClientPy.src.ElectricalManagmentModels.Model_Enums import ItemTypeEnum
from Marvell.EMClientPy.src.Common.Utilities import TwosComplement
from Marvell.EMClientPy.src.Common.Constants import *
from typing import List


class Ac2DcPS:
    pass


class Ac2DcPS(ItemType):
    type_: str = ''
    desc = ''
    _debug = False

    def __init__(self, elm, parent, connId):
        super(Ac2DcPS, self).__init__(elm, parent, connId, ItemTypeEnum.Ac2DcPS)
        if elm is not None:
            self.type_ = self.getFirstChildElement('type')
            self.desc = self.getFirstChildElement('desc')
            # self.measure_type = Models_Validator.measureType(self.getFirstChildElement('measure_type'))

    """*********************************************************************************
    AC2DC PS EM APIs
    *********************************************************************************"""

    @staticmethod
    def getAc2DcPSsIDs(board) -> List[int]:
        res: List[int] = []
        for ps in Ac2DcPS._getPSsElements(board):
            res.append(ps.id)
        return res

    @staticmethod
    def getAc2DcPSInfo(board, psId):
        ps = Ac2DcPS._getPSElement(board, psId)
        return ps.getInfo()

    @staticmethod
    def getTemp_AC2DC_PMBusValue(board, provider, psId) -> float:
        ps = Ac2DcPS._getPSElement(board, psId)
        ps.setProvider(provider)
        return ps.readTemperature()

    """*********************************************************************************
    Board AC/DC PS search APIs
    *********************************************************************************"""

    @staticmethod
    def _getPSsElements(board) -> List[Ac2DcPS]:
        return board.getItemElementsByType(ItemTypeEnum.Ac2DcPS)

    @staticmethod
    def _getPSElement(board, psId) -> Ac2DcPS:
        return board.getItemElementById(ItemTypeEnum.Ac2DcPS, psId)

    def _debug_read_back(self, stage, slaveAddr, regAddr, nbytes, expected_data):
        if not self._debug:
            return
        data_back = self.ReadArrayPMBus(self.addr, regAddr, nbytes)
        print(
            f"[Read Back] stage:{stage}, addr:{hex(slaveAddr)},reg:{hex(regAddr)}, try to write:{hex(expected_data)}, "
            f"read back:{hex(data_back)}")

    """*********************************************************************************
    Getters
    *********************************************************************************"""

    def getInfo(self) -> dict:
        res = {
            'name': self.desc,
            'address': self.addr,
        }
        return res

    # def getPSType(self) -> int:
    #     if self.type_.startswith("TPS"):
    #         return PSTypeEnum.TI
    #     else:
    #         return PSTypeEnum.Ericsson
    #
    def getAc2DcInfo(self) -> [int, int, int]:
        ac2dcType = self.getAc2DcType()
        return ac2dcType

    # def getSubChannel(self) -> int:
    #     subChannel = -1
    #     match = re.search(r'_(\d)$', self.type_)
    #     if match is not None:
    #         subChannel = int(match[1])
    #     return subChannel
    #
    def getAc2DcType(self) -> int:
        if self.type_.startswith("D1U74T-W"):
            ac2dcType = AC2DCTypeEnum.D1U74T_W_2700
        else:
            raise Exception(f"Type {self.type_} not supported")
        return ac2dcType

    #
    # def getPage(self) -> int:
    #     page = 0x0
    #     match = re.search(r'_(All|[A-D])', self.type_)
    #     if match is not None:
    #         if match[1] == 'A':
    #             page = TIChannelEnum.ChannelA
    #         elif match[1] == 'B':
    #             page = TIChannelEnum.ChannelB
    #         elif match[1] == 'C':
    #             page = TIChannelEnum.ChannelC
    #         elif match[1] == 'D':
    #             page = TIChannelEnum.ChannelD
    #         elif match[1] == 'All':
    #             page = TIChannelEnum.ChannelAll
    #     else:
    #         page = TIChannelEnum.NA
    #     return page

    """*********************************************************************************
    Getters For Calculated values and Validators
    *********************************************************************************"""

    @staticmethod
    def CalculateAC2DCTempFormula_LINEAR(data: int) -> float:
        N = TwosComplement(5, (data & 0xF800) >> 11)  # exponent
        M = TwosComplement(11, data & 0x7FF)  # mantissa
        D = M * pow(2.0, N)
        return D

    """*********************************************************************************
    AC2DC PS Algo
    *********************************************************************************"""

    def readTemperature(self) -> dict[str, float]:
        type = self.getAc2DcInfo()
        if type != AC2DCTypeEnum.D1U74T_W_2700:
            raise Exception(
                "AC/DC PS {0} not supported. support D1U74T_W_2700 Ac/DC power supply only.".format(str(tpsType)))

        #
        # if self.getPSType() == PSTypeEnum.TI:
        #     self.setTiChannel()
        # self.getProvider().genericWrite(self.addr << 1, 1, 0x4, 1, 0x80)

        regs = [0x8c, 0x8e, 0x8f]
        temperatures = {}
        i = 1

        for addr in regs:
            data = self.ReadArrayPMBus(self.addr, addr, 2)
            # calculate temperature
            value = self.CalculateAC2DCTempFormula_LINEAR(data)
            temperatures[f"Temperature_{str(i)}"] = round(value, 1)
            i += 1
        return temperatures

    """*********************************************************************************
    Auxiliary methods
    *********************************************************************************"""

    """*********************************************************************************
    IO Methods
    *********************************************************************************"""

    def ReadArrayPMBus(self, addr: int, regAddr: int, nBytes: int) -> int:
        data = self.getProvider().ReadI2CArray(addr << 1, nBytes, regAddr, 1)
        val = 0
        for i in range(len(data)):
            val += data[i] << (i * 8)
        return val


"""*********************************************************************************
AC/DC PS related ENUMS
*********************************************************************************"""


class AC2DCTypeEnum(IntEnum):
    D1U74T_W_2700 = 0,  # 3 sensors
