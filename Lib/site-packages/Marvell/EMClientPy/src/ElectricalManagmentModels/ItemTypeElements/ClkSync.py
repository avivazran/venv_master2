from Marvell.EMClientPy.src.ElectricalManagmentModels.Base_Models import VrefElement, EmModel
from Marvell.EMClientPy.src.ElectricalManagmentModels.Model_Enums import ItemTypeEnum, PolarityEnum, ModeEnum, \
    ClkSyncBaseRegisterType, ClkSyncTypeEnum
from Marvell.EMClientPy.src.ElectricalManagmentModels.Models_Validator import Models_Validator
from Marvell.EMClientPy.src.Common.Constants import *
from Marvell.EMClientPy.src.Common.Types import *
from Marvell.EMClientPy.src.Common.Utilities import TwosComplement
from typing import List
from time import sleep

# PPL1_NUM_REG = [0x00, 0x6e]
# PPL2_NUM_REG = [0x00, 0x88]
# PLL2_DEN_REG = [0x01, 0x4D]
PPL1_NUM_REG = [0x6e]
PPL2_NUM_REG = [0x88]
PLL2_DEN_REG = [0x4D]


class ClkSync_Ch:
    pass


class ClkSync:
    pass


def LMK05318_CalculatePLLBaseReg(reg_type: ClkSyncBaseRegisterType, ppmValue):
    x = round(ppmValue // 5)
    ret_list = []
    if reg_type == ClkSyncBaseRegisterType.PLL1_NUM:
        # PLL1_NUM =    330305962254 +(X * 353495250.7 ) with X being the amount of ppm intervals. X =1 if
        # +5ppm, x = -2 if -10ppm, etc
        PLL1_NUM = round(330305962254 + (x * 353495250.7))
        for i in range(5):
            di = (PLL1_NUM >> i * 8) & 0xff
            ret_list.append(di)
    elif reg_type == ClkSyncBaseRegisterType.PLL2_NUM:
        # PLL2_NUM =  10000 - ( X * 10.8 ) with X being the amount of 5ppm intervals. X =1 if +5ppm,
        # x = -2 if -10ppm, etc
        PLL2_NUM = round(10000 - (x * 10.8))

        for i in range(3):
            di = (PLL2_NUM >> i * 8) & 0xff
            ret_list.append(di)
    elif reg_type == ClkSyncBaseRegisterType.PPL2_DEN:
        # R333 holds most significant bit and R335 the least significant bit
        return [0x00, 0xC3, 0x50]
        pass

    ret_list.reverse()
    return ret_list


class ClkSync(VrefElement):
    type = ''
    name = ''
    ch: List[ClkSync_Ch] = None

    def __init__(self, elm, parent, connId):
        super(ClkSync, self).__init__(elm, parent, connId, ItemTypeEnum.ClkSync)
        if elm is not None:
            self.type = self.getFirstChildElement('type')
            self.name = self.getFirstChildElement('name')

            ch = self.getChildrenElements('ch', 12)
            self.ch = []
            for c in ch:
                self.ch.append(ClkSync_Ch(c, self, 0))

    """*********************************************************************************
    ClkSync EM APIs
    *********************************************************************************"""

    @staticmethod
    def getClkSyncsIDs(board) -> List[int]:
        res: List[int] = []
        for ClkSync in ClkSync._getClkSyncsElements(board):
            res.append(ClkSync.id)
        return res

    @staticmethod
    def getClkSyncChannelsNumbers(board, ClkSyncId) -> List[int]:
        ClkSync = ClkSync._getClkSyncElement(board, ClkSyncId)
        return ClkSync.getChannelNumbers()

    @staticmethod
    def SetPPMClock(board, provider, ClkSyncId, ClkSyncCh, ppmValue):
        clkSync = ClkSync._getClkSyncElement(board, ClkSyncId)
        clkSync.setProvider(provider)
        return clkSync.setPPM(board, ClkSyncCh, ppmValue)

    """*********************************************************************************
    Board ClkSync search APIs
    *********************************************************************************"""

    @staticmethod
    def _getClkSyncsElements(board) -> List[ClkSync]:
        return board.getItemElementsByType(ItemTypeEnum.ClkSync)

    @staticmethod
    def _getClkSyncElement(board, ClkSyncId) -> ClkSync:
        return board.getItemElementById(ItemTypeEnum.ClkSync, ClkSyncId)

    """*********************************************************************************
    Getters
    *********************************************************************************"""

    def GetChannel(self, channelNumber):
        for c in self.ch:
            if c.num == channelNumber:
                return c
        return None

    def getChannelNumbers(self) -> List[int]:
        res: List[int] = []
        for ch in self.ch:
            res.append(ch.num)
        return res

    """*********************************************************************************
    Getters For Calculated values and Validators
    *********************************************************************************"""

    def convertToRawValue(self, value: int):
        result = ((1 << self.GetResolution()) - 1) & value
        return result

    """*********************************************************************************
    ClkSync Algo
    *********************************************************************************"""

    def setPPM(self, board, chNum, value):
        try:
            if self.type == ClkSyncTypeEnum.LMK05318.value:
                ch = self.GetChannel(chNum)
                if ch is not None:
                    # board.setPath(self.getProvider(), self)
                    self.LMK05318B_SetPPMClock(board, ch, value)
                else:
                    raise Exception(f"Channel {chNum} not correct")
            else:
                raise Exception(f"Type {self.type} not supported.")
        except Exception as e:
            raise Exception(f"Failed to set ClkSync. Error: {str(e)}")

    """*********************************************************************************
    Auxiliary methods
    *********************************************************************************"""

    def LMK05318B_SetPPMClock(self, board, ch: ClkSync_Ch, ppmValue):

        """
        Set Path to connect COMe to LMK05318B
        Change divider register to get 0clkSync
        Write to EEPROM
        """

        ss = 0.5
        read_back = False
        try:

            # Set Path to connect COMe to LMK05318B
            board.setPath(self.getProvider(), self)

            if read_back:
                self.getProvider().ReadI2CArray(0x71 << 1, 1, 0x0, 0)
                self.getProvider().ReadI2CArray(0x70 << 1, 1, 0x0, 0)

            # Change divider register to get clkSync-value

            """
            i2ctransfer -y 1 w7@0x64 0x00 0x6e 0x4B 0x42 0x5E 0xD0 0x98 r5
            i2ctransfer -y 1 w5@0x64 0x00 0x88 0x00 0x27 0xE8 r3
            i2ctransfer -y 1 w5@0x64 0x01 0x4D 0x00 0xC3 0x50 r3
            """
            pll1_num = bytes(PPL1_NUM_REG + LMK05318_CalculatePLLBaseReg(ClkSyncBaseRegisterType.PLL1_NUM, ppmValue))
            # pll1_num = bytes([0x00, 0x6e, 0x4B, 0x42, 0x5E, 0xD0, 0x98])

            pll2_num = bytes(PPL2_NUM_REG + LMK05318_CalculatePLLBaseReg(ClkSyncBaseRegisterType.PLL2_NUM, ppmValue))
            # pll2_num = bytes([0x00, 0x88, 0x00, 0x27, 0xE8])

            pll2_den = bytes(PLL2_DEN_REG + LMK05318_CalculatePLLBaseReg(ClkSyncBaseRegisterType.PPL2_DEN, ppmValue))
            # pll2_den = bytes([0x01, 0x4D, 0x00, 0xC3, 0x50])
            if ch.num == 0:
                self.getProvider().WriteArray(self.addr << 1, 0x0, 6, pll1_num)

            self.getProvider().WriteArray(self.addr << 1, 0x0, 4, pll2_num)

            self.getProvider().WriteArray(self.addr << 1, 0x01, 4, pll2_den)

            # Write to EEPROM
            """
            i2ctransfer -y 1 w3@0x64 0x00 0x9D 0x40 r1
            i2ctransfer -y 1 w3@0x64 0x00 0xA4 0xEA r1
            i2ctransfer -y 1 w3@0x64 0x00 0x9D 0x03 r1
            Wait 500ms or pull to check R157[2] is cleared
            i2ctransfer -y 1 w3@0x64 0x00 0xA4 0x00 r1
            """

            eeprom1 = bytes([0x9D, 0x40])
            eeprom2 = bytes([0xA4, 0xEA])
            eeprom3 = bytes([0x9D, 0x03])
            eeprom4 = bytes([0xA4, 0x00])

            self.getProvider().WriteArray(self.addr << 1, 0x0, 2, eeprom1)

            self.getProvider().WriteArray(self.addr << 1, 0x0, 2, eeprom2)

            self.getProvider().WriteArray(self.addr << 1, 0x0, 2, eeprom3)

            # Wait 500ms or pull to check R157[2] is cleared
            sleep(ss)
            data = self.getProvider().ReadI2CArray(self.addr << 1, 1, 0x009d, 2)

            self.getProvider().WriteArray(self.addr << 1, 0, 2, eeprom4)

            if read_back:
                data = self.getProvider().ReadI2CArray(self.addr << 1, 5, 0x006e, 2)
                data = self.getProvider().ReadI2CArray(self.addr << 1, 3, 0x0088, 2)
                data = self.getProvider().ReadI2CArray(self.addr << 1, 3, 0x014d, 2)
                data = self.getProvider().ReadI2CArray(self.addr << 1, 1, 0x009d, 2)
                data = self.getProvider().ReadI2CArray(self.addr << 1, 1, 0x00a4, 2)
                data = self.getProvider().ReadI2CArray(self.addr << 1, 1, 0x009d, 2)
                data = self.getProvider().ReadI2CArray(self.addr << 1, 1, 0x00a4, 2)

        except Exception as e:
            raise Exception(f"Failed to set ClkSync for type {'LMK05318B'}. Error:{str(e)}")


class ClkSync_Ch:
    pass


class ClkSync_Ch(EmModel):
    desc = ''
    name = ''
    num = 0

    def __init__(self, elm, parent, connId):
        super(ClkSync_Ch, self).__init__(elm, parent, connId)
        if elm is not None:
            self.desc = self.getFirstChildElement('desc')
            self.name = self.getFirstChildElement('name')
            self.num = Models_Validator.nonNegativeInteger(self.getAttribute('num'), 11)

    def getInfo(self) -> dict:
        res = {
            'name': self.name,
            'desc': self.desc
        }
        return res

# print("PPL1_NUM:")
# print("     0PPM")
#
# l = PPL1_NUM_REG + LMK05318_CalculatePLLBaseReg(ClkSyncBaseRegisterType.PLL1_NUM, 0)
# print(bytes(l))
# print([hex(i) for i in l])
#
# print("     +100PPM")
# l = PPL1_NUM_REG + LMK05318_CalculatePLLBaseReg(ClkSyncBaseRegisterType.PLL1_NUM, 100)
# print([hex(i) for i in l])
#
# print("     -100PPM")
# l = PPL1_NUM_REG + LMK05318_CalculatePLLBaseReg(ClkSyncBaseRegisterType.PLL1_NUM, -100)
# print([hex(i) for i in l])
#
# print("PPL2_NUM")
#
# print("     0PPM")
#
# l = PPL2_NUM_REG + LMK05318_CalculatePLLBaseReg(ClkSyncBaseRegisterType.PLL2_NUM, 0)
# print([hex(i) for i in l])
#
# print("     +100PPM")
# l = PPL2_NUM_REG + LMK05318_CalculatePLLBaseReg(ClkSyncBaseRegisterType.PLL2_NUM, 100)
# print([hex(i) for i in l])
#
# print("     -100PPM")
# l = PPL2_NUM_REG + LMK05318_CalculatePLLBaseReg(ClkSyncBaseRegisterType.PLL2_NUM, -100)
# print([hex(i) for i in l])
