import typing

from Marvell.EMClientPy.src.ElectricalManagmentModels.Base_Models import ItemType, EmModel
from Marvell.EMClientPy.src.ElectricalManagmentModels.Models_Validator import Models_Validator
from Marvell.EMClientPy.src.ElectricalManagmentModels.Model_Enums import ItemTypeEnum, MuxTypeEnum

from typing import List
class MUX_Ch(EmModel):
    num = 0
    items: List[ItemType] = None

    def __init__(self, elm, parent, connId, factory):

        super(MUX_Ch, self).__init__(elm, parent, connId)
        if elm is not None:
            it = self.getChildrenElements('item')
            self.num = Models_Validator.nonNegativeInteger(self.getAttribute('num'), 7)
            self.items = []
            for i in it:
                self.items.append(factory.create(i, parent, self.num))


class Mux(ItemType):
    muxType = ''
    ch: List[MUX_Ch] = None

    def __init__(self, elm, parent, connId, factory):
        super(Mux, self).__init__(elm, parent, connId, ItemTypeEnum.MUX)
        if elm is not None:
            self.muxType = Models_Validator.muxType(self.getFirstChildElement('muxType'))
            ch = self.getChildrenElements("ch", 7)
            self.ch = []
            for c in ch:
                self.ch.append(MUX_Ch(c, self, None, factory))

    def getItemTypeElements(self) -> List[ItemType]:
        res: List[ItemType] = []
        for c in self.ch:
            for elm in c.items:
                res.append(elm)  #we want to append the element itself - whether it's mux or not
                if elm.getItemType() == ItemTypeEnum.MUX:
                    res.extend(elm.getItemTypeElements())
        return res

    def selectChannel(self, provider, chNum: int):
        if self.muxType == MuxTypeEnum.PCA9544.name:
            chMaxCount = 4
            data = 0xF4 + chNum
        elif self.muxType == MuxTypeEnum.PCA9548.name:
            chMaxCount = 8
            data = 1 << chNum
        else:
            raise Exception('Unrecognized Mux type')

        if chNum >= chMaxCount:
            raise Exception('Channel number exceeds the max channel number for current mux type')

        return provider.WriteByte(self.addr, data)
