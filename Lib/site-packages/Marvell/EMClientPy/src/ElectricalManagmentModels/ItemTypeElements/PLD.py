# from __future__ import annotations
import re
from math import pow
from time import sleep

from Marvell.EMClientPy.src.ElectricalManagmentModels.Base_Models import ItemType, EmModel

from Marvell.EMClientPy.src.ElectricalManagmentModels.Models_Validator import Models_Validator
from Marvell.EMClientPy.src.ElectricalManagmentModels.Model_Enums import ItemTypeEnum, PLDTypeEnum
from Marvell.EMClientPy.src.Common.Utilities import TwosComplement
from Marvell.EMClientPy.src.Common.Constants import *
from typing import List

MAX_PLD_MODES = 4

class PLD_Mode:
    pass

class PLD:
    pass

class PLD(ItemType):
    type_: PLDTypeEnum
    desc = ''
    modes: List[PLD_Mode] = None

    def __init__(self, elm, parent, connId):
        super(PLD, self).__init__(elm, parent, connId, ItemTypeEnum.PLD)
        if elm is not None:
            self.type_ = PLDTypeEnum(self.getFirstChildElement('type'))
            self.desc = self.getFirstChildElement('desc')
            modes = self.getChildrenElements('mode', MAX_PLD_MODES)
            self.modes = []
            for mode in modes:
                self.modes.append(PLD_Mode(mode, self, 0))

    """*********************************************************************************
    PLD EM APIs
    *********************************************************************************"""

    @staticmethod
    def SetFanHeaterControlMode(board, provider, pldId, modeNum: int):
        pld = PLD._getPLDElement(board, pldId)
        mode: PLD_Mode = pld.GetMode(modeNum)
        if mode is None:
            raise Exception("No such element in XML DB.pld id={0}, mode num={1} is not existed. check the XML file.".
                            format(pldId, modeNum))
        if not Models_Validator.isValidPLDModeValue(pld.type_, mode.value):  # check id it's in the modes
            raise Exception('mode num={0}, value={1}, you are trying to set is out of valid range for current PLD '
                            'type:\'{2}\''
                            .format(modeNum, hex(mode.value), pld.type_.value))
        pld.setProvider(provider)
        pld.setPLDControlMode(mode)

    @staticmethod
    def getPLDsIDs(board) -> List[int]:
        res: List[int] = []
        for pld in PLD._getPLDsElements(board):
            res.append(pld.id)
        return res

    @staticmethod
    def getPLDModesNumbers(board, pldId) -> List[int]:
        pld = PLD._getPLDElement(board, pldId)
        return pld.getModeNumbers()

    """*********************************************************************************
    Board PS search APIs
    *********************************************************************************"""

    @staticmethod
    def _getPLDsElements(board) -> List[PLD]:
        return board.getItemElementsByType(ItemTypeEnum.PLD)

    @staticmethod
    def _getPLDElement(board, pldId) -> PLD:
        return board.getItemElementById(ItemTypeEnum.PLD, pldId)

    """*********************************************************************************
    Getters
    *********************************************************************************"""

    def GetMode(self, modeNumber):
        for mode in self.modes:
            if mode.num == modeNumber:
                return mode
        return None

    def getModeNumbers(self) -> List[int]:
        res: List[int] = []
        for mode in self.modes:
            res.append(mode.num)
        return res

    """*********************************************************************************
    PS Algo
    *********************************************************************************"""

    def setPLDControlMode(self, mode: PLD_Mode):
        self.getProvider().genericWrite(self.addr << 1, 1, mode.addr, 1, mode.value)
        read_data = self.ReadArrayPMBus(self.addr, mode.addr, 1)
        if mode.value != (read_data & mode.mask):
            raise Exception("Failed to set mode. after write value={0},read  value={1}".
                            format(hex(mode.value), hex(read_data)))

    """*********************************************************************************
    IO Methods
    *********************************************************************************"""

    def ReadArrayPMBus(self, addr: int, regAddr: int, nBytes: int) -> int:
        data = self.getProvider().ReadI2CArray(addr << 1, nBytes, regAddr, 1)
        val = 0
        for i in range(len(data)):
            val += data[i] << (i * 8)
        return val


class PLD_Mode(EmModel):
    name = ''
    desc = ''
    value = -1
    num = 0
    addr: int = -1
    mask = -1

    def __init__(self, elm, parent, connId):
        super(PLD_Mode, self).__init__(elm, parent, connId)
        if elm is not None:
            self.num = Models_Validator.nonNegativeInteger(self.getAttribute('num'), MAX_PLD_MODES)
            self.name = self.getFirstChildElement('name')
            self.desc = self.getFirstChildElement('desc')
            self.addr = Models_Validator.addrType(self.getFirstChildElement("addr"))
            self.value = Models_Validator.addrType(self.getFirstChildElement("value"))
            self.mask = Models_Validator.addrType(self.getFirstChildElement("mask"))

    def getInfo(self) -> dict:
        res = {
            'name': self.name,
            'desc': self.desc
        }
        return res
