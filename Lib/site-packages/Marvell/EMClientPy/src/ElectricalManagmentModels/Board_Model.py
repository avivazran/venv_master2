# from __future__ import annotations
from .ItemTypeElements.Mux import Mux
from .Models_Validator import Models_Validator
from .Base_Models import EmModel, ItemType
from Marvell.EMClientPy.src.ElectricalManagmentModels.ItemTypeElements.ItemTypeFactory import ItemFactory
from Marvell.EMClientPy.src.ElectricalManagmentModels.Model_Enums import ItemTypeEnum
from typing import List

class BoardInfo(EmModel):
    name = ''
    revision = 0.0

    def __init__(self, elm, parent, connId):
        super(BoardInfo, self).__init__(elm, parent, connId)
        if elm is not None:
            self.name = self.getFirstChildElement('name')
            self.revision = Models_Validator.float(self.getFirstChildElement('revision'))


class Board(EmModel):
    board_info: BoardInfo = None
    items: List[ItemType] = None

    def __init__(self, elm):
        super(Board, self).__init__(elm, None, -1)
        if elm is not None:
            self.board_info = BoardInfo(self.getFirstChildElement('board_info', None), self, -1)
            items = self.getChildrenElements('item')
            self.items = []
            for item in items:
                self.items.append(ItemFactory.create(item, self, None))

    def getBoardInfo(self):
        return self.board_info

    def getAllItemElements(self):
        res: List[ItemType] = []
        for elm in self.items:
            res.append(elm)  #we want to append the element itself - whether it's mux or not
            if elm.getItemType() == ItemTypeEnum.MUX:
                res.extend(elm.getItemTypeElements())
        return res

    def getItemElementsByType(self, _type: ItemTypeEnum, items: List[ItemType] = None) -> List[ItemType]:
        if items is None:
            items = self.getAllItemElements()

        res: List[ItemType] = []
        for elm in items:
            if elm.getItemType() == _type:
                res.append(elm)
        return res

    def getItemElementById(self, _type: ItemTypeEnum, _id: int, items: List[ItemType] = None) -> ItemType:
        elements = self.getItemElementsByType(_type, items)
        for elm in elements:
            if elm.id == _id:
                return elm
        raise Exception('No such element in DB')

    def getItemElementByAddress(self, _type: ItemTypeEnum, address: int) -> ItemType:
        for elm in self.getAllItemElements():
            if elm.addr == address:
                return elm
        raise Exception('No element with such address found')

    def selectChannel(self, provider, chNum: int):
        # Do nothing
        # this for recursive solution in set electrical path method
        pass

    @staticmethod
    def setPath(provider, elm: EmModel):
        parent = elm.getParent()
        connId = elm.getConnId()
        while parent is not None:
            if type(parent) != Mux :
                parent = parent.getParent()
                continue
            # check if it open
            if connId != parent.getOpenConnId():
                try:
                    # we assume parent is Mux/Board
                    parent.selectChannel(provider, connId)
                except Exception as e:
                    raise Exception('Error in open electrical path to element:\n' + str(e))
            # move up the tree for next iteration
            connId = parent.getConnId()
            parent = parent.getParent()
