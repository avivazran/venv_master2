# -------------------------------------------------------------------------------
# Copyright (c) (2023) Marvell. All rights reserved
#
# The following file is subject to the limited use license agreement
# by and between Marvell and you, your employer or other entity on
# behalf of whom you act. In the absence of such license agreement the
# following file is subject to Marvell's standard Limited Use License Agreement.
# -------------------------------------------------------------------------------
#
# GENERATED CODE, DO NOT EDIT
#

from enum import IntEnum
from typing import List, Optional, Union
from typing_extensions import Literal
from pydantic import BaseModel


class HwsErrorDetail(BaseModel):
    reason: int
    desc: str
    context: dict


class HwsError(BaseModel):
    detail: HwsErrorDetail


GT_CHAR = int
GT_STATUS = int
GT_8 = int
GT_U8 = int
GT_16 = int
GT_U16 = int
GT_32 = int
GT_U32 = int
GT_L64 = int
GT_UL64 = int
GT_U64_BIT = int
GT_FLOAT32 = float
GT_FLOAT64 = float
GT_UOPT = GT_U32
GT_VOID = None


class GT_COMP_RES(IntEnum):
    GT_EQUAL = 0
    GT_GREATER = 1
    GT_SMALLER = 2


class GT_BOOL(IntEnum):
    GT_FALSE = 0
    GT_TRUE = 1


class MV_HWS_SERDES_TYPE(IntEnum):
    COM_PHY_N5C112GX44PLL = 0
    COM_PHY_N5C112GX45PLL = 1
    SERDES_LAST = 2


class MV_HWS_SERDES_SPEED(IntEnum):
    SPEED_NA = 0
    _1_0625G = 1
    _1_2288G = 2
    _1_25G = 3
    _2_125G = 4
    _2_4576G = 5
    _2_5G = 6
    _3_125G = 7
    _4_25G = 8
    _4_9152G = 9
    _5G = 10
    _5_15625G = 11
    _6_144G = 12
    _6_25G = 13
    _7_5G = 14
    _8_5G = 15
    _9_8304G = 16
    _10_1376G = 17
    _10_3125G = 18
    _10_51875G = 19
    _12_16512G = 20
    _12_1875G = 21
    _12_5G = 22
    _12_890625G = 23
    _14_025G = 24
    _20_625G = 25
    _24_33024G = 26
    _25_78125G = 27
    _26_5625G = 28
    _27_5G = 29
    _27_1875G = 30
    _28_05G = 31
    _28_125G = 32
    _32_5G = 33
    _46_25G_P4 = 34
    _50G = 35
    _51_5625G_P4 = 36
    _53_125G_P4 = 37
    _54_375G_P4 = 38
    _56G = 39
    _56_1G_P4 = 40
    _56_25G_P4 = 41
    _106_25G_P4 = 42
    _112G_P4 = 43
    _112_5G_P4 = 44
    _2_578125G = 45
    _15G = 46
    _57_8G_P4 = 47
    _112_2G_P4 = 48
    _13_28125G = 49
    _42_5G_P4 = 50
    _51_5625G = 51
    _10_9375G = 52
    _11_40625G = 53
    _12_96875G = 54
    _27_34375G = 55
    _27_78125G = 56
    _27_95G = 57
    _90G_P4 = 58
    LAST_MV_HWS_SERDES_SPEED = 59


class MV_HWS_REF_CLOCK(IntEnum):
    _25Mhz = 0
    _30Mhz = 1
    _40Mhz = 2
    _50Mhz = 3
    _62_5Mhz = 4
    _100Mhz = 5
    _125Mhz = 6
    _156_25Mhz = 7
    _212_5Mhz = 8
    LAST_MV_HWS_REF_CLOCK = 9


class MV_HWS_REF_CLOCK_SRC(IntEnum):
    PRIMARY = 0
    SECONDARY = 1
    LAST_MV_HWS_REF_CLOCK_SRC = 2


class MV_HWS_SERDES_MEDIA(IntEnum):
    XAUI_MEDIA = 0
    RXAUI_MEDIA = 1


class MV_HWS_SERDES_BUS_WIDTH_ENT(IntEnum):
    _32BIT_ON = 0
    _40BIT_ON = 1
    _64BIT_ON = 2
    _80BIT_ON = 3
    _128BIT_ON = 4
    _160BIT_ON = 5
    MV_HWS_SERDES_BUS_WIDTH_ENT_LAST = 6


class MV_HWS_SERDES_ENCODING_TYPE(IntEnum):
    SERDES_ENCODING_NA = 0
    SERDES_ENCODING_NRZ = 1
    SERDES_ENCODING_PAM4 = 2
    SERDES_ENCODING_LAST = 3


class MV_HWS_SERDES_POWER_LEVEL(IntEnum):
    SERDES_POWER_LEVEL_LR = 0
    SERDES_POWER_LEVEL_MR = 1


class MV_HWS_SERDES_TX_PATTERN(IntEnum):
    _1T = 0
    _2T = 1
    _5T = 2
    _8T = 3
    _10T = 4
    USER = 5
    SSPRQ = 6
    JITTER_K28P5 = 7
    JITTER_1T = 8
    JITTER_2T = 9
    JITTER_4T = 10
    JITTER_5T = 11
    JITTER_8T = 12
    JITTER_10T = 13
    PRBS7 = 14
    PRBS9 = 15
    PRBS11 = 16
    PRBS11_0 = 17
    PRBS11_1 = 18
    PRBS11_2 = 19
    PRBS11_3 = 20
    PRBS15 = 21
    PRBS16 = 22
    PRBS23 = 23
    PRBS31 = 24
    PRBS32 = 25
    PRBS13_0 = 26
    PRBS13_1 = 27
    PRBS13_2 = 28
    PRBS13_3 = 29
    LAST_SERDES_TX_PATTERN = 30


class MV_HWS_SERDES_TEST_GEN_MODE(IntEnum):
    SERDES_NORMAL = 0
    SERDES_TEST = 1


class MV_HWS_AUTO_TUNE_STATUS(IntEnum):
    TUNE_PASS = 0
    TUNE_FAIL = 1
    TUNE_NOT_COMPLITED = 2
    TUNE_READY = 3
    TUNE_NOT_READY = 4
    TUNE_RESET = 5


class MV_HWS_SERDES_LB(IntEnum):
    SERDES_LP_DISABLE = 0
    SERDES_LP_AN_TX_RX = 1
    SERDES_LP_DIG_TX_RX = 2
    SERDES_LP_DIG_RX_TX = 3
    LAST_MV_HWS_SERDES_LB = 4


class MV_HWS_PORT_SERDES_EOM_BER_THRESHOLD_ENT(IntEnum):
    MV_HWS_PORT_SERDES_BER_THRESHOLD_ORDER_10_3_E = 0
    MV_HWS_PORT_SERDES_BER_THRESHOLD_ORDER_10_4_E = 1
    MV_HWS_PORT_SERDES_BER_THRESHOLD_ORDER_10_5_E = 2
    MV_HWS_PORT_SERDES_BER_THRESHOLD_ORDER_10_6_E = 3


class MV_HWS_PORT_SERDES_EOM_MIN_SAMPLES_ENT(IntEnum):
    MV_HWS_PORT_SERDES_MIN_SAMPLES_ORDER_10_3_E = 0
    MV_HWS_PORT_SERDES_MIN_SAMPLES_ORDER_10_4_E = 1
    MV_HWS_PORT_SERDES_MIN_SAMPLES_ORDER_10_5_E = 2
    MV_HWS_PORT_SERDES_MIN_SAMPLES_ORDER_10_6_E = 3
    MV_HWS_PORT_SERDES_MIN_SAMPLES_ORDER_10_7_E = 4
    MV_HWS_PORT_SERDES_MIN_SAMPLES_ORDER_10_8_E = 5
    MV_HWS_PORT_SERDES_MIN_SAMPLES_ORDER_10_9_E = 6


class MV_HWS_SERDES_DIRECTION(IntEnum):
    RX_DIRECTION = 0
    TX_DIRECTION = 1


class MV_HWS_SERDES_DATA_ACQ_RATE(IntEnum):
    RATE_QUARTER = 0
    RATE_HALF = 1
    RATE_FULL = 2
    RATE_UNKNOWN = 3


class MV_HWS_SERDES_RESET_TYPE(IntEnum):
    SOFT_RESET = 0
    RF_RESET = 1
    CORE_RX_RESET = 2
    CORE_TX_RESET = 3
    CORE_TXRX_RESET = 4


class MV_HWS_SERDES_OCM_INPUT_SEL(IntEnum):
    ADC = 0
    DATA = 1
    DTL = 2


class MV_HWS_SERDES_PRESET_INIT(IntEnum):
    PRESET_INIT_PRESET1 = 0
    PRESET_INIT_PRESET2 = 1
    PRESET_INIT_PRESET3 = 2
    PRESET_INIT_INIT = 3


class GT_U64(BaseModel):
    l: List[GT_U32]


class MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_RX_CONFIG_DATA(BaseModel):
    trainR: GT_U32
    trainC: GT_U32
    trainGc: GT_U32
    trainAtten: GT_U32
    kpFrac: GT_U32
    kpShift: GT_U32
    kiFrac: GT_U32
    kiShift: GT_U32
    squelchThreshold: GT_16


class MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_RX_FFE_DP_DATA(BaseModel):
    ffePre6: GT_32
    ffePre5: GT_32
    ffePre4: GT_32
    ffePre3: GT_32
    ffePre2: GT_32
    ffePre1: GT_32
    ffePst1: GT_32
    ffePst2: GT_32
    ffePst3: GT_32
    ffePst4: GT_32
    ffePst5: GT_32
    ffePst6: GT_32
    ffePst7: GT_32
    ffePst8: GT_32
    ffePst9: GT_32
    ffePst10: GT_32
    ffePst11: GT_32
    ffePst12: GT_32
    ffePst13: GT_32
    ffePst14: GT_32
    ffePst15: GT_32
    ffePst16: GT_32
    ffeGain: GT_32
    ffeBlw: GT_32
    ffeDfe: GT_32


class MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_RX_FFE_CP_DATA(BaseModel):
    ffePre3: GT_32
    ffePre2: GT_32
    ffePre1: GT_32
    ffePst1: GT_32
    ffePst2: GT_32
    ffePst3: GT_32
    ffeGain: GT_32
    ffeBlw: GT_32


class MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_TX_CONFIG_DATA(BaseModel):
    pre3: GT_8
    pre2: GT_8
    pre: GT_8
    main: GT_8
    post: GT_8
    post2: GT_8


class MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_TX_PRESET_CONFIG_DATA(BaseModel):
    pre3: GT_8
    pre2: GT_8
    pre: GT_8
    main: GT_8
    post: GT_8
    post2: GT_8


class MV_HWS_COMPHY_C112GX44PLL_AUTO_TUNE_RESULTS(BaseModel):
    txComphyC112GX44PLL: MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_TX_CONFIG_DATA
    rxComphyC112GX44PLL: MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_RX_CONFIG_DATA
    rxFfeDpComphyC112GX44PLL: MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_RX_FFE_DP_DATA
    squelched: GT_BOOL
    snr: GT_U32
    ppm: GT_U32
    cdrLocked: GT_BOOL


class MV_HWS_COMPHY_C112GX44PLL_AUTO_TUNE_ADV_RESULTS(BaseModel):
    autoTuneResult: MV_HWS_COMPHY_C112GX44PLL_AUTO_TUNE_RESULTS
    rxFfeCpComphyC112GX44PLL: MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_RX_FFE_CP_DATA
    txTrainDoneLane: GT_U32
    txTrainPassLane: GT_U32
    txTrainAbortLane: GT_U32
    rxTrainDoneLane: GT_U32
    rxTrainPassLane: GT_U32
    rxTrainAbortLane: GT_U32
    trainAbortReasonLane: GT_U32
    timeDurationInfo0Lane: GT_U32
    timeDurationInfo1Lane: GT_U32
    trxTrainTimeoutLane: GT_U32
    trxTrainTimerLane: GT_U32
    rxTrainTimerLane: GT_U32
    trxTrainTimeoutEnLane: GT_U32
    txTrainFrameDetTimerEnableLane: GT_U32
    txtrainPatternLockLostEnLane: GT_U32
    mcuStatus0Lane: GT_U32
    bgSkewCalBlindEnLane: GT_U32
    rxSkewCalBlindEnLane: GT_U32
    trSkewCalBlindEnLane: GT_U32
    rxAdcIfAgcEnLane: GT_U32
    rxAdcIfAgcGainLane: GT_U32
    trxTrainAgcEnLane: GT_U32
    skewAdapt0Lane: GT_U32
    skewAdapt1Lane: GT_U32
    skewAdapt2Lane: GT_U32
    skewAdapt3Lane: GT_U32
    skewAdapt4Lane: GT_U32
    skewAdapt5Lane: GT_U32
    skewAdapt6Lane: GT_U32
    skewAdapt7Lane: GT_U32
    pinAvddSelRd: GT_U32
    intRxTrainFailLane: GT_U32
    intTxTrainFailedLane: GT_U32
    rxTrainEnableRdLane: GT_U32
    txTrainEnableRdLane: GT_U32
    rxTrainFailedLane: GT_U32
    rxTrainCompleteLane: GT_U32
    spdCfg: GT_U32
    txDccA90CalResultMsbRdLane: GT_U32
    txDccA90CalResultLsbRdLane: GT_U32
    txAlign90HsCalResultMsbRdLane: GT_U32
    txAlign90HsCalResultLsbRdLane: GT_U32
    txDccA0CalResultMsbRdLane: GT_U32
    txDccA0CalResultLsbRdLane: GT_U32
    txE2cDccCalResultRdLane: GT_U32
    txE2cDccCalTimeoutRdLane: GT_U32
    txAlign90HsCalTimeoutRdLane: GT_U32
    txAlign90LsCalTimeoutRdLane: GT_U32
    txDccA90CalTimeoutRdLane: GT_U32
    txDccA0CalTimeoutRdLane: GT_U32
    trxVddrTxdataCalResultExtLane: GT_U32
    trxVddrTxdataCalResultRdLane: GT_U32
    trxVddrTxclkCalResultExtLane: GT_U32
    trxVddrTxclkCalResultRdLane: GT_U32
    txImpNCalResultExtLane: GT_U32
    txImpNCalResultRdLane: GT_U32
    txImpPCalResultExtLane: GT_U32
    txImpPCalResultRdLane: GT_U32
    rxE2cDccCalResultRdLane: GT_U32
    dllCalResultMsbExtLane: GT_U32
    dllCalResultLsbExtLane: GT_U32
    rxDccA90CalResultLsbRdLane: GT_U32
    rxDccA90CalResultMsbRdLane: GT_U32
    rxDccA0CalResultLsbRdLane: GT_U32
    rxDccA0CalResultMsbRdLane: GT_U32
    rxAlign90CalResultLsbRdLane: GT_U32
    rxAlign90CalResultMsbRdLane: GT_U32
    impcalRxLane: GT_U32
    txImpTempcPcalResultRdLane: GT_U32
    txImpTempcNcalResultRdLane: GT_U32
    rxDtlClampingEnLane: GT_U32
    dtlClampRstModeLane: GT_U32
    rxDtlClampingValLane: GT_U32
    dtlClampingTriggeredLane: GT_U32


class MV_HWS_COMPHY_C112GX44PLL_SBR_BUFFER(BaseModel):
    timeData: List[GT_FLOAT64]
    bufferData: List[GT_FLOAT64]
    count: GT_U32


class MV_HWS_COMPHY_C112GX44PLL_EOM_IN_PARAMS(BaseModel):
    minSamples: MV_HWS_PORT_SERDES_EOM_MIN_SAMPLES_ENT
    berThreshold: MV_HWS_PORT_SERDES_EOM_BER_THRESHOLD_ENT
    eomStatsMode: GT_BOOL
    berThresholdMax: MV_HWS_PORT_SERDES_EOM_BER_THRESHOLD_ENT
    phaseStepSize: GT_U32
    voltageStepSize: GT_U32


class MV_HWS_COMPHY_C112GX44PLL_EOM_OUT_PARAMS(BaseModel):
    width_mUI: List[GT_U32]
    height_mV: List[GT_U32]
    sampleCount: List[GT_U32]
    Q: List[GT_FLOAT64]
    SNR: List[GT_FLOAT64]
    upperMean: List[GT_FLOAT64]
    lowerMean: List[GT_FLOAT64]
    upperStdDev: List[GT_FLOAT64]
    lowerStdDev: List[GT_FLOAT64]


class MV_HWS_COMPHY_C112GX44PLL_OCM_BUFFER_DATA(BaseModel):
    bufferData: List[GT_8]


class MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_RX_CONFIG_DATA(BaseModel):
    trainR: GT_U32
    trainC: GT_U32
    trainGc: GT_U32
    trainAtten: GT_U32
    kpFrac: GT_U32
    kpShift: GT_U32
    kiFrac: GT_U32
    kiShift: GT_U32
    squelchThreshold: GT_16


class MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_RX_FFE_DP_DATA(BaseModel):
    ffePre6: GT_32
    ffePre5: GT_32
    ffePre4: GT_32
    ffePre3: GT_32
    ffePre2: GT_32
    ffePre1: GT_32
    ffePst1: GT_32
    ffePst2: GT_32
    ffePst3: GT_32
    ffePst4: GT_32
    ffePst5: GT_32
    ffePst6: GT_32
    ffePst7: GT_32
    ffePst8: GT_32
    ffePst9: GT_32
    ffePst10: GT_32
    ffePst11: GT_32
    ffePst12: GT_32
    ffePst13: GT_32
    ffePst14: GT_32
    ffePst15: GT_32
    ffePst16: GT_32
    ffeGain: GT_32
    ffeBlw: GT_32
    ffeDfe: GT_32


class MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_RX_FFE_CP_DATA(BaseModel):
    ffePre3: GT_32
    ffePre2: GT_32
    ffePre1: GT_32
    ffePst1: GT_32
    ffePst2: GT_32
    ffePst3: GT_32
    ffeGain: GT_32
    ffeBlw: GT_32


class MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_TX_CONFIG_DATA(BaseModel):
    pre3: GT_8
    pre2: GT_8
    pre: GT_8
    main: GT_8
    post: GT_8
    post2: GT_8


class MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_TX_PRESET_CONFIG_DATA(BaseModel):
    presetSelPre3: MV_HWS_SERDES_PRESET_INIT
    presetSelPre2: MV_HWS_SERDES_PRESET_INIT
    presetSelPre: MV_HWS_SERDES_PRESET_INIT
    presetSelMain: MV_HWS_SERDES_PRESET_INIT
    presetSelPost: MV_HWS_SERDES_PRESET_INIT
    pre3: GT_8
    pre2: GT_8
    pre: GT_8
    main: GT_8
    post: GT_8
    preset: GT_U32


class MV_HWS_COMPHY_C112GX45PLL_AUTO_TUNE_RESULTS(BaseModel):
    txComphyC112GX45PLL: MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_TX_CONFIG_DATA
    rxComphyC112GX45PLL: MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_RX_CONFIG_DATA
    rxFfeDpComphyC112GX45PLL: MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_RX_FFE_DP_DATA
    squelched: GT_BOOL
    snr: GT_U32
    ppm: GT_U32
    cdrLocked: GT_BOOL


class MV_HWS_COMPHY_C112GX45PLL_AUTO_TUNE_ADV_RESULTS(BaseModel):
    autoTuneResult: MV_HWS_COMPHY_C112GX45PLL_AUTO_TUNE_RESULTS
    rxFfeCpComphyC112GX45PLL: MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_RX_FFE_CP_DATA
    txTrainDoneLane: GT_U32
    txTrainPassLane: GT_U32
    txTrainAbortLane: GT_U32
    rxTrainDoneLane: GT_U32
    rxTrainPassLane: GT_U32
    rxTrainAbortLane: GT_U32
    trainAbortReasonLane: GT_U32
    timeDurationInfo0Lane: GT_U32
    timeDurationInfo1Lane: GT_U32
    trxTrainTimeoutLane: GT_U32
    trxTrainTimerLane: GT_U32
    rxTrainTimerLane: GT_U32
    trxTrainTimeoutEnLane: GT_U32
    txTrainFrameDetTimerEnableLane: GT_U32
    txtrainPatternLockLostEnLane: GT_U32
    mcuStatus0Lane: GT_U32
    bgSkewCalBlindEnLane: GT_U32
    rxSkewCalBlindEnLane: GT_U32
    trSkewCalBlindEnLane: GT_U32
    rxAdcIfAgcEnLane: GT_U32
    rxAdcIfAgcGainLane: GT_U32
    trxTrainAgcEnLane: GT_U32
    skewAdapt0Lane: GT_U32
    skewAdapt1Lane: GT_U32
    skewAdapt2Lane: GT_U32
    skewAdapt3Lane: GT_U32
    skewAdapt4Lane: GT_U32
    skewAdapt5Lane: GT_U32
    skewAdapt6Lane: GT_U32
    skewAdapt7Lane: GT_U32
    pinAvddSelRd: GT_U32
    intRxTrainFailLane: GT_U32
    intTxTrainFailedLane: GT_U32
    rxTrainEnableRdLane: GT_U32
    txTrainEnableRdLane: GT_U32
    rxTrainFailedLane: GT_U32
    rxTrainCompleteLane: GT_U32
    spdCfg: GT_U32
    txDccA90CalResultMsbRdLane: GT_U32
    txDccA90CalResultLsbRdLane: GT_U32
    txAlign90HsCalResultMsbRdLane: GT_U32
    txAlign90HsCalResultLsbRdLane: GT_U32
    txDccA0CalResultMsbRdLane: GT_U32
    txDccA0CalResultLsbRdLane: GT_U32
    txE2cDccCalResultRdLane: GT_U32
    txE2cDccCalTimeoutRdLane: GT_U32
    txAlign90HsCalTimeoutRdLane: GT_U32
    txAlign90LsCalTimeoutRdLane: GT_U32
    txDccA90CalTimeoutRdLane: GT_U32
    txDccA0CalTimeoutRdLane: GT_U32
    trxVddrTxdataCalResultExtLane: GT_U32
    trxVddrTxdataCalResultRdLane: GT_U32
    trxVddrTxclkCalResultExtLane: GT_U32
    trxVddrTxclkCalResultRdLane: GT_U32
    txImpNCalResultExtLane: GT_U32
    txImpNCalResultRdLane: GT_U32
    txImpPCalResultExtLane: GT_U32
    txImpPCalResultRdLane: GT_U32
    rxE2cDccCalResultRdLane: GT_U32
    dllCalResultMsbExtLane: GT_U32
    dllCalResultLsbExtLane: GT_U32
    rxDccA90CalResultLsbRdLane: GT_U32
    rxDccA90CalResultMsbRdLane: GT_U32
    rxDccA0CalResultLsbRdLane: GT_U32
    rxDccA0CalResultMsbRdLane: GT_U32
    rxAlign90CalResultLsbRdLane: GT_U32
    rxAlign90CalResultMsbRdLane: GT_U32
    impcalRxLane: GT_U32
    txImpTempcPcalResultRdLane: GT_U32
    txImpTempcNcalResultRdLane: GT_U32
    rxDtlClampingEnLane: GT_U32
    dtlClampRstModeLane: GT_U32
    rxDtlClampingValLane: GT_U32
    dtlClampingTriggeredLane: GT_U32


class MV_HWS_COMPHY_C112GX45PLL_SBR_BUFFER(BaseModel):
    timeData: List[GT_FLOAT64]
    bufferData: List[GT_FLOAT64]
    count: GT_U32


class MV_HWS_COMPHY_C112GX45PLL_EOM_IN_PARAMS(BaseModel):
    minSamples: MV_HWS_PORT_SERDES_EOM_MIN_SAMPLES_ENT
    berThreshold: MV_HWS_PORT_SERDES_EOM_BER_THRESHOLD_ENT
    eomStatsMode: GT_BOOL
    berThresholdMax: MV_HWS_PORT_SERDES_EOM_BER_THRESHOLD_ENT
    phaseStepSize: GT_U32
    voltageStepSize: GT_U32


class MV_HWS_COMPHY_C112GX45PLL_EOM_OUT_PARAMS(BaseModel):
    width_mUI: List[GT_U32]
    height_mV: List[GT_U32]
    sampleCount: List[GT_U32]
    Q: List[GT_FLOAT64]
    SNR: List[GT_FLOAT64]
    upperMean: List[GT_FLOAT64]
    lowerMean: List[GT_FLOAT64]
    upperStdDev: List[GT_FLOAT64]
    lowerStdDev: List[GT_FLOAT64]


class MV_HWS_COMPHY_C112GX45PLL_OCM_BUFFER_DATA(BaseModel):
    bufferData: List[GT_8]


class MV_HWS_SERDES_CONFIG_STC(BaseModel):
    serdesType: MV_HWS_SERDES_TYPE
    baudRate: MV_HWS_SERDES_SPEED
    refClock: MV_HWS_REF_CLOCK
    refClockSource: MV_HWS_REF_CLOCK_SRC
    media: MV_HWS_SERDES_MEDIA
    busWidth: MV_HWS_SERDES_BUS_WIDTH_ENT
    encoding: MV_HWS_SERDES_ENCODING_TYPE
    powerLevel: MV_HWS_SERDES_POWER_LEVEL
    opticalMode: GT_BOOL


class MV_HWS_SERDES_AUTO_TUNE_RESULTS_UNT(BaseModel):
    comphyC112GX44PLLResults: Optional[MV_HWS_COMPHY_C112GX44PLL_AUTO_TUNE_RESULTS]
    comphyC112GX45PLLResults: Optional[MV_HWS_COMPHY_C112GX45PLL_AUTO_TUNE_RESULTS]


class MV_HWS_SERDES_AUTO_TUNE_ADV_RESULTS_UNT(BaseModel):
    comphyC112GX44PLLResults: Optional[MV_HWS_COMPHY_C112GX44PLL_AUTO_TUNE_ADV_RESULTS]
    comphyC112GX45PLLResults: Optional[MV_HWS_COMPHY_C112GX45PLL_AUTO_TUNE_ADV_RESULTS]


class MV_HWS_SERDES_SBR_BUFFER(BaseModel):
    comphyC112GX44PLLSBRBuffer: Optional[MV_HWS_COMPHY_C112GX44PLL_SBR_BUFFER]
    comphyC112GX45PLLSBRBuffer: Optional[MV_HWS_COMPHY_C112GX45PLL_SBR_BUFFER]


class MV_HWS_SERDES_TEST_GEN_STATUS(BaseModel):
    errorsCntr: GT_U64
    txFramesCntr: GT_U64
    lockStatus: GT_U32


class MV_HWS_SERDES_TX_CONFIG_DATA_UNT(BaseModel):
    txComphyC112GX44PLL: Optional[MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_TX_CONFIG_DATA]
    txComphyC112GX45PLL: Optional[MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_TX_CONFIG_DATA]


class MV_HWS_SERDES_TX_PRESET_CONFIG_DATA_UNT(BaseModel):
    txPresetComphyC112GX44PLL: Optional[MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_TX_PRESET_CONFIG_DATA]
    txPresetComphyC112GX45PLL: Optional[MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_TX_PRESET_CONFIG_DATA]


class MV_HWS_SERDES_RX_CONFIG_DATA_UNT(BaseModel):
    rxComphyC112GX44PLL: Optional[MV_HWS_MAN_TUNE_COMPHY_C112GX44PLL_RX_CONFIG_DATA]
    rxComphyC112GX45PLL: Optional[MV_HWS_MAN_TUNE_COMPHY_C112GX45PLL_RX_CONFIG_DATA]


class MV_HWS_SERDES_EOM_IN_PARAMS_UNT(BaseModel):
    comphyC112GX44PLLEomInParams: Optional[MV_HWS_COMPHY_C112GX44PLL_EOM_IN_PARAMS]
    comphyC112GX45PLLEomInParams: Optional[MV_HWS_COMPHY_C112GX45PLL_EOM_IN_PARAMS]


class MV_HWS_SERDES_ENCODING_CONFIG_STC(BaseModel):
    grayCode: GT_BOOL
    msblsbSwap: GT_BOOL
    preCode: GT_BOOL


class MV_HWS_SERDES_STATUS(BaseModel):
    txEncoding: MV_HWS_SERDES_ENCODING_TYPE
    rxEncoding: MV_HWS_SERDES_ENCODING_TYPE
    pllPower: GT_BOOL
    powerTx: GT_BOOL
    powerRx: GT_BOOL
    tsLocked: GT_BOOL
    rsLocked: GT_BOOL
    txReady: GT_BOOL
    rxReady: GT_BOOL
    txSpeed: MV_HWS_SERDES_SPEED
    rxSpeed: MV_HWS_SERDES_SPEED
    txWidth: MV_HWS_SERDES_BUS_WIDTH_ENT
    rxWidth: MV_HWS_SERDES_BUS_WIDTH_ENT
    txFreq: MV_HWS_REF_CLOCK
    rxFreq: MV_HWS_REF_CLOCK
    txClkSel: MV_HWS_REF_CLOCK_SRC
    rxClkSel: MV_HWS_REF_CLOCK_SRC
    mrMode: GT_BOOL
    txOutputEn: GT_BOOL
    txPolarity: GT_BOOL
    rxPolarity: GT_BOOL
    txGrayCode: GT_BOOL
    rxGrayCode: GT_BOOL
    txSwapMsbLsb: GT_BOOL
    rxSwapMsbLsb: GT_BOOL
    txPreCode: GT_BOOL
    rxPreCode: GT_BOOL
    lbMode: MV_HWS_SERDES_LB
    ptTxEn: GT_BOOL
    ptRxEn: GT_BOOL
    txPattern: MV_HWS_SERDES_TX_PATTERN
    rxPattern: MV_HWS_SERDES_TX_PATTERN
    txUserPattern: List[GT_8]
    rxUserPattern: List[GT_8]
    comparatorStatsLock: GT_BOOL
    comparatorStatsPass: GT_BOOL
    comparatorStatsTotalBits: GT_UL64
    comparatorStatsTotalErrorBits: GT_UL64
    tuneResults: MV_HWS_SERDES_AUTO_TUNE_RESULTS_UNT
    temperature: GT_32
    acqRate: MV_HWS_SERDES_DATA_ACQ_RATE


class MV_HWS_SERDES_EOM_OUT_PARAMS_UNT(BaseModel):
    comphyC112GX44PLLEomOutParams: Optional[MV_HWS_COMPHY_C112GX44PLL_EOM_OUT_PARAMS]
    comphyC112GX45PLLEomOutParams: Optional[MV_HWS_COMPHY_C112GX45PLL_EOM_OUT_PARAMS]


class MV_HWS_OCM_BUFFER_DATA_UNT(BaseModel):
    comphyC112GX44PLLOcmBufferData: Optional[MV_HWS_COMPHY_C112GX44PLL_OCM_BUFFER_DATA]
    comphyC112GX45PLLOcmBufferData: Optional[MV_HWS_COMPHY_C112GX45PLL_OCM_BUFFER_DATA]


class MV_HWS_OCM_BUFFER(BaseModel):
    bufferDataPtr: MV_HWS_OCM_BUFFER_DATA_UNT
    numRepetitions: GT_U32


class mvHwsSerdesBase(BaseModel):
    devNum: Optional[int] = None
    portGroup: Optional[int] = None
    serdesNum: Optional[int] = None


class mvHwsSerdesEncodingTypeGet(mvHwsSerdesBase):
    id: Literal["EncodingTypeGet"] = "EncodingTypeGet"


class mvHwsSerdesEncodingTypeGet_Out(mvHwsSerdesBase):
    id: Literal["EncodingTypeGet_"] = "EncodingTypeGet_"
    txEncodingPtr: MV_HWS_SERDES_ENCODING_TYPE
    rxEncodingPtr: MV_HWS_SERDES_ENCODING_TYPE


class mvHwsSerdesTxPresetConfig(mvHwsSerdesBase):
    id: Literal["TxPresetConfig"] = "TxPresetConfig"


class mvHwsSerdesTxPresetConfig_Out(mvHwsSerdesBase):
    id: Literal["TxPresetConfig_"] = "TxPresetConfig_"
    txPresetConfig: MV_HWS_SERDES_TX_PRESET_CONFIG_DATA_UNT


class mvHwsSerdesPPMGet(mvHwsSerdesBase):
    id: Literal["PPMGet"] = "PPMGet"


class mvHwsSerdesPPMGet_Out(mvHwsSerdesBase):
    id: Literal["PPMGet_"] = "PPMGet_"
    ppm: GT_32


class mvHwsSerdesPPMSet(mvHwsSerdesBase):
    id: Literal["PPMSet"] = "PPMSet"
    ppm: GT_32


class mvHwsSerdesReset(mvHwsSerdesBase):
    id: Literal["Reset"] = "Reset"
    resetType: MV_HWS_SERDES_RESET_TYPE


class mvHwsSerdesOCMGet(mvHwsSerdesBase):
    id: Literal["OCMGet"] = "OCMGet"
    inputSel: GT_U32


class mvHwsSerdesOCMGet_Out(mvHwsSerdesBase):
    id: Literal["OCMGet_"] = "OCMGet_"
    bufferPtr: MV_HWS_OCM_BUFFER


class mvHwsSerdesFwDownload(mvHwsSerdesBase):
    id: Literal["FwDownload"] = "FwDownload"
    fwFilePtr: GT_8


class mvHwsSerdesStatusGet(mvHwsSerdesBase):
    id: Literal["StatusGet"] = "StatusGet"
    verbose: GT_BOOL


class mvHwsSerdesStatusGet_Out(mvHwsSerdesBase):
    id: Literal["StatusGet_"] = "StatusGet_"
    status: MV_HWS_SERDES_STATUS


class mvHwsSerdesTemperatureGet(mvHwsSerdesBase):
    id: Literal["TemperatureGet"] = "TemperatureGet"


class mvHwsSerdesTemperatureGet_Out(mvHwsSerdesBase):
    id: Literal["TemperatureGet_"] = "TemperatureGet_"
    temp: GT_U32


class mvHwsSerdesSBRGet(mvHwsSerdesBase):
    id: Literal["SBRGet"] = "SBRGet"
    preCursor: GT_U32
    postCursor: GT_U32


class mvHwsSerdesSBRGet_Out(mvHwsSerdesBase):
    id: Literal["SBRGet_"] = "SBRGet_"
    buffer: MV_HWS_SERDES_SBR_BUFFER


class mvHwsSerdesSignalDetectGet(mvHwsSerdesBase):
    id: Literal["SignalDetectGet"] = "SignalDetectGet"


class mvHwsSerdesSignalDetectGet_Out(mvHwsSerdesBase):
    id: Literal["SignalDetectGet_"] = "SignalDetectGet_"
    signalDet: GT_BOOL


class mvHwsSerdesErrorInject(mvHwsSerdesBase):
    id: Literal["ErrorInject"] = "ErrorInject"
    numOfBits: GT_UOPT
    serdesDirection: MV_HWS_SERDES_DIRECTION


class mvHwsSerdesEncodingSet(mvHwsSerdesBase):
    id: Literal["EncodingSet"] = "EncodingSet"
    txEncConfigPtr: MV_HWS_SERDES_ENCODING_CONFIG_STC
    rxEncConfigPtr: MV_HWS_SERDES_ENCODING_CONFIG_STC


class mvHwsSerdesEncodingGet(mvHwsSerdesBase):
    id: Literal["EncodingGet"] = "EncodingGet"


class mvHwsSerdesEncodingGet_Out(mvHwsSerdesBase):
    id: Literal["EncodingGet_"] = "EncodingGet_"
    txEncConfigPtr: MV_HWS_SERDES_ENCODING_CONFIG_STC
    rxEncConfigPtr: MV_HWS_SERDES_ENCODING_CONFIG_STC


class mvHwsSerdesEomMatrixGet(mvHwsSerdesBase):
    id: Literal["EomMatrixGet"] = "EomMatrixGet"
    printEnable: GT_BOOL
    eomInParams: MV_HWS_SERDES_EOM_IN_PARAMS_UNT


class mvHwsSerdesEomMatrixGet_Out(mvHwsSerdesBase):
    id: Literal["EomMatrixGet_"] = "EomMatrixGet_"
    eomOutParams: MV_HWS_SERDES_EOM_OUT_PARAMS_UNT


class mvHwsSerdesCDRLockGet(mvHwsSerdesBase):
    id: Literal["CDRLockGet"] = "CDRLockGet"


class mvHwsSerdesCDRLockGet_Out(mvHwsSerdesBase):
    id: Literal["CDRLockGet_"] = "CDRLockGet_"
    cdrLock: GT_BOOL


class mvHwsSerdesSNRGet(mvHwsSerdesBase):
    id: Literal["SNRGet"] = "SNRGet"


class mvHwsSerdesSNRGet_Out(mvHwsSerdesBase):
    id: Literal["SNRGet_"] = "SNRGet_"
    snr: GT_U32


class mvHwsSerdesTxEnable(mvHwsSerdesBase):
    id: Literal["TxEnable"] = "TxEnable"
    enable: GT_BOOL


class mvHwsSerdesManualRxConfig(mvHwsSerdesBase):
    id: Literal["ManualRxConfig"] = "ManualRxConfig"
    rxConfigPtr: MV_HWS_SERDES_RX_CONFIG_DATA_UNT


class mvHwsSerdesManualTxConfig(mvHwsSerdesBase):
    id: Literal["ManualTxConfig"] = "ManualTxConfig"
    manTxTuneStcPtr: MV_HWS_SERDES_TX_CONFIG_DATA_UNT


class mvHwsComphySerdesRegisterWrite(mvHwsSerdesBase):
    id: Literal["RegisterWrite"] = "RegisterWrite"
    regAddr: GT_U32
    mask: GT_U32
    data: GT_U32


class mvHwsComphySerdesRegisterRead(mvHwsSerdesBase):
    id: Literal["RegisterRead"] = "RegisterRead"
    regAddr: GT_U32
    mask: GT_U32


class mvHwsComphySerdesRegisterRead_Out(mvHwsSerdesBase):
    id: Literal["RegisterRead_"] = "RegisterRead_"
    data: GT_U32


class mvHwsComphySerdesSDWRegisterWrite(mvHwsSerdesBase):
    id: Literal["SDWRegisterWrite"] = "SDWRegisterWrite"
    regAddr: GT_U32
    mask: GT_U32
    data: GT_U32


class mvHwsComphySerdesSDWRegisterRead(mvHwsSerdesBase):
    id: Literal["SDWRegisterRead"] = "SDWRegisterRead"
    regAddr: GT_U32
    mask: GT_U32


class mvHwsComphySerdesSDWRegisterRead_Out(mvHwsSerdesBase):
    id: Literal["SDWRegisterRead_"] = "SDWRegisterRead_"
    data: GT_U32


class mvHwsSerdesLoopbackSet(mvHwsSerdesBase):
    id: Literal["LoopbackSet"] = "LoopbackSet"
    lbMode: MV_HWS_SERDES_LB


class mvHwsSerdesPolarityConfigSet(mvHwsSerdesBase):
    id: Literal["PolarityConfigSet"] = "PolarityConfigSet"
    invertTx: GT_BOOL
    invertRx: GT_BOOL


class mvHwsSerdesPolarityConfigGet(mvHwsSerdesBase):
    id: Literal["PolarityConfigGet"] = "PolarityConfigGet"


class mvHwsSerdesPolarityConfigGet_Out(mvHwsSerdesBase):
    id: Literal["PolarityConfigGet_"] = "PolarityConfigGet_"
    invertTx: GT_BOOL
    invertRx: GT_BOOL


class mvHwsSerdesTestGenStatus(mvHwsSerdesBase):
    id: Literal["TestGenStatus"] = "TestGenStatus"
    counterAccumulateMode: GT_BOOL
    status: MV_HWS_SERDES_TEST_GEN_STATUS


class mvHwsSerdesTestGenStatus_Out(mvHwsSerdesBase):
    id: Literal["TestGenStatus_"] = "TestGenStatus_"
    txPattern: MV_HWS_SERDES_TX_PATTERN


class mvHwsSerdesAutoTuneResult(mvHwsSerdesBase):
    id: Literal["AutoTuneResult"] = "AutoTuneResult"


class mvHwsSerdesAutoTuneResult_Out(mvHwsSerdesBase):
    id: Literal["AutoTuneResult_"] = "AutoTuneResult_"
    results: MV_HWS_SERDES_AUTO_TUNE_RESULTS_UNT


class mvHwsSerdesAutoTuneAdvancedResult(mvHwsSerdesBase):
    id: Literal["AutoTuneAdvancedResult"] = "AutoTuneAdvancedResult"


class mvHwsSerdesAutoTuneAdvancedResult_Out(mvHwsSerdesBase):
    id: Literal["AutoTuneAdvancedResult_"] = "AutoTuneAdvancedResult_"
    results: MV_HWS_SERDES_AUTO_TUNE_ADV_RESULTS_UNT


class mvHwsSerdesAutoTuneStatus(mvHwsSerdesBase):
    id: Literal["AutoTuneStatus"] = "AutoTuneStatus"


class mvHwsSerdesAutoTuneStatus_Out(mvHwsSerdesBase):
    id: Literal["AutoTuneStatus_"] = "AutoTuneStatus_"
    rxStatus: MV_HWS_AUTO_TUNE_STATUS
    txStatus: MV_HWS_AUTO_TUNE_STATUS


class mvHwsSerdesRxAutoTuneStart(mvHwsSerdesBase):
    id: Literal["RxAutoTuneStart"] = "RxAutoTuneStart"
    rxTraining: GT_BOOL


class mvHwsSerdesTxAutoTuneStart(mvHwsSerdesBase):
    id: Literal["TxAutoTuneStart"] = "TxAutoTuneStart"
    txTraining: GT_BOOL


class mvHwsSerdesAutoTuneStart(mvHwsSerdesBase):
    id: Literal["AutoTuneStart"] = "AutoTuneStart"
    rxTraining: GT_BOOL
    txTraining: GT_BOOL


class mvHwsSerdesTestGen(mvHwsSerdesBase):
    id: Literal["TestGen"] = "TestGen"
    txPattern: MV_HWS_SERDES_TX_PATTERN
    mode: MV_HWS_SERDES_TEST_GEN_MODE


class mvHwsSerdesPowerCtrl(mvHwsSerdesBase):
    id: Literal["PowerCtrl"] = "PowerCtrl"
    powerUp: GT_BOOL
    serdesConfigPtr: MV_HWS_SERDES_CONFIG_STC


class mvHwsSerdesCmnInit(mvHwsSerdesBase):
    id: Literal["CmnInit"] = "CmnInit"


HwsSerdesCmd = Union[
    mvHwsSerdesEncodingTypeGet,
    mvHwsSerdesTxPresetConfig,
    mvHwsSerdesPPMGet,
    mvHwsSerdesPPMSet,
    mvHwsSerdesReset,
    mvHwsSerdesOCMGet,
    mvHwsSerdesFwDownload,
    mvHwsSerdesStatusGet,
    mvHwsSerdesTemperatureGet,
    mvHwsSerdesSBRGet,
    mvHwsSerdesSignalDetectGet,
    mvHwsSerdesErrorInject,
    mvHwsSerdesEncodingSet,
    mvHwsSerdesEncodingGet,
    mvHwsSerdesEomMatrixGet,
    mvHwsSerdesCDRLockGet,
    mvHwsSerdesSNRGet,
    mvHwsSerdesTxEnable,
    mvHwsSerdesManualRxConfig,
    mvHwsSerdesManualTxConfig,
    mvHwsComphySerdesRegisterWrite,
    mvHwsComphySerdesRegisterRead,
    mvHwsComphySerdesSDWRegisterWrite,
    mvHwsComphySerdesSDWRegisterRead,
    mvHwsSerdesLoopbackSet,
    mvHwsSerdesPolarityConfigSet,
    mvHwsSerdesPolarityConfigGet,
    mvHwsSerdesTestGenStatus,
    mvHwsSerdesAutoTuneResult,
    mvHwsSerdesAutoTuneAdvancedResult,
    mvHwsSerdesAutoTuneStatus,
    mvHwsSerdesRxAutoTuneStart,
    mvHwsSerdesTxAutoTuneStart,
    mvHwsSerdesAutoTuneStart,
    mvHwsSerdesTestGen,
    mvHwsSerdesPowerCtrl,
    mvHwsSerdesCmnInit,
]


class mvHwsNone_Out(mvHwsSerdesBase):
    id: Literal["None_"] = "None_"


HwsSerdesCmdOut = Union[
    mvHwsNone_Out,
    mvHwsSerdesEncodingTypeGet_Out,
    mvHwsSerdesTxPresetConfig_Out,
    mvHwsSerdesPPMGet_Out,
    mvHwsSerdesOCMGet_Out,
    mvHwsSerdesStatusGet_Out,
    mvHwsSerdesTemperatureGet_Out,
    mvHwsSerdesSBRGet_Out,
    mvHwsSerdesSignalDetectGet_Out,
    mvHwsSerdesEncodingGet_Out,
    mvHwsSerdesEomMatrixGet_Out,
    mvHwsSerdesCDRLockGet_Out,
    mvHwsSerdesSNRGet_Out,
    mvHwsComphySerdesRegisterRead_Out,
    mvHwsComphySerdesSDWRegisterRead_Out,
    mvHwsSerdesPolarityConfigGet_Out,
    mvHwsSerdesTestGenStatus_Out,
    mvHwsSerdesAutoTuneResult_Out,
    mvHwsSerdesAutoTuneAdvancedResult_Out,
    mvHwsSerdesAutoTuneStatus_Out,
]
