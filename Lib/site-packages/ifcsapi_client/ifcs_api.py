#-------------------------------------------------------------------------------
# Copyright (c) (2023) Marvell. All rights reserved
#
# The following file is subject to the limited use license agreement
# by and between Marvell and you, your employer or other entity on
# behalf of whom you act. In the absence of such license agreement the
# following file is subject to Marvell's standard Limited Use License Agreement.
#-------------------------------------------------------------------------------

import json
import logging
import requests

from typing import List, Optional
from pydantic import parse_obj_as

from .ifcs_error import *
from .ifcs_model import *
from .hws_model import *
from .model import *
from . import __about__

logger = logging.getLogger(__name__)

HTTP_OK = 200
HTTP_CREATED = 201
HTTP_BAD_REQUEST = 400

class IfcsApi:
    IFCS_PREFIX = "/ifcs"
    HWS_PREFIX = "/hws"

    def __init__(self, base_url: str, session: requests.Session = None) -> None:
        self.base_url = base_url
        if session is None:
            session = requests.Session()
        self.session = session

    def __version__(self) -> str:
        return __about__.__version__

    def ifcs_version(self) -> IfcsVersion:
        r = self.__request("GET", f"{IfcsApi.IFCS_PREFIX}/")
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return IfcsVersion.parse_raw(r.text)

    def ifcs_init(self, config: str = None, boot: int = None) -> int:
        r = self.__request(
            "POST", f"{IfcsApi.IFCS_PREFIX}/", params={"config": config, "boot": boot}
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        response = json.loads(r.text)
        logger.info("response: %s", response)
        node_info = IfcsNodeInfo.parse_obj(response)
        return node_info.node_count

    def ifcs_deinit(self, shutdown_type: int = None) -> None:
        r = self.__request(
            "DELETE", f"{IfcsApi.IFCS_PREFIX}/", params={"shutdown_type": shutdown_type}
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_node_create(self, node_id: int, attrs: List[ifcs_attr_t] = None) -> None:
        body = [attr.dict() for attr in attrs] if attrs is not None else None
        r = self.__request("POST", f"{IfcsApi.IFCS_PREFIX}/nodes/{node_id}", json=body)
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code > HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_node_delete(self, node_id: int) -> None:
        r = self.__request("DELETE", f"{IfcsApi.IFCS_PREFIX}/nodes/{node_id}")
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_node_attr_get(
        self, node_id: int, attr_ids: List[int] = None
    ) -> List[ifcs_attr_t]:
        r = self.__request("GET", f"{IfcsApi.IFCS_PREFIX}/nodes/{node_id}", json=attr_ids)
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        attrs = json.loads(r.text)
        logger.info("response: %s", attrs)
        return [ifcs_attr_t.parse_obj(attr) for attr in attrs]

    def ifcs_node_attr_set(self, node_id: int, attrs: List[ifcs_attr_t] = None) -> None:
        body = [attr.dict() for attr in attrs] if attrs is not None else None
        r = self.__request("PATCH", f"{IfcsApi.IFCS_PREFIX}/nodes/{node_id}", json=body)
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_node_stats_get(
        self, node_id: int, stats_ids: List[int] = None
    ) -> IfcsNodeStats:
        r = self.__request(
            "GET", f"{IfcsApi.IFCS_PREFIX}/nodes/{node_id}/stats", json=stats_ids
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        stats = json.loads(r.text)
        logger.info("response: %s", stats)
        return IfcsNodeStats.parse_obj(stats)

    def ifcs_node_stats_clear(self, node_id: int, stats_ids: List[int] = None) -> None:
        r = self.__request(
            "DELETE", f"{IfcsApi.IFCS_PREFIX}/nodes/{node_id}/stats", json=stats_ids
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_devport_create(self, node_id: int, devport: int, attrs: List[ifcs_attr_t]):
        body = [attr.dict() for attr in attrs] if attrs is not None else None
        r = self.__request(
            "POST",
            f"{IfcsApi.IFCS_PREFIX}/devports/{devport}",
            params={"node_id": node_id},
            json=body,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code > HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_devport_create_bulk(self, node_id: int, dattrs: IfcsDevportAttrs):
        body = [attr.dict() for attr in dattrs] if dattrs is not None else None
        r = self.__request(
            "POST",
            f"{IfcsApi.IFCS_PREFIX}/devports",
            params={"node_id": node_id},
            json=body,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code > HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_devport_delete(self, node_id: int, devport: int) -> None:
        r = self.__request(
            "DELETE",
            f"{IfcsApi.IFCS_PREFIX}/devports/{devport}",
            params={"node_id": node_id},
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_devport_delete_bulk(
        self, node_id: int, devports: List[int] = None
    ) -> None:
        r = self.__request(
            "DELETE",
            f"{IfcsApi.IFCS_PREFIX}/devports/",
            params={"node_id": node_id},
            json=devports,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_devport_attr_get(
        self, node_id: int, devport: int, attr_ids: List[int] = None
    ) -> List[ifcs_attr_t]:
        r = self.__request(
            "GET",
            f"{IfcsApi.IFCS_PREFIX}/devports/{devport}",
            params={"node_id": node_id},
            json=attr_ids,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        attrs = json.loads(r.text)
        logger.info("response: %s", attrs)
        devport_attrs = IfcsDevportAttrs.parse_obj(attrs)
        return devport_attrs.attrs

    def ifcs_devport_attr_get_bulk(
        self, node_id: int, devports: List[int] = None, attr_ids: List[int] = None
    ) -> List[IfcsDevportAttrs]:
        body = {}
        if devports is not None:
            body["devports"] = devports
        if attr_ids is not None:
            body["attr_ids"] = attr_ids
        if not body:
            body = None
        r = self.__request(
            "GET", f"{IfcsApi.IFCS_PREFIX}/devports/", params={"node_id": node_id}, json=body
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        attrs = json.loads(r.text)
        logger.info("response: %s", attrs)
        devport_attrs = [IfcsDevportAttrs.parse_obj(attr) for attr in attrs]
        return devport_attrs

    def ifcs_devport_attr_set(
        self, node_id: int, devport: int, attrs: List[ifcs_attr_t] = None
    ) -> None:
        body = [attr.dict() for attr in attrs]
        r = self.__request(
            "PATCH",
            f"{IfcsApi.IFCS_PREFIX}/devports/{devport}",
            params={"node_id": node_id},
            json=body,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_devport_attr_set_bulk(
        self, node_id: int, devports: List[int] = None, attrs: List[ifcs_attr_t] = None
    ) -> None:
        body = {}
        if devports is not None:
            body["devports"] = devports
        if attrs is not None:
            body["attrs"] = [attr.dict() for attr in attrs]
        if not body:
            body = None
        r = self.__request(
            "PATCH",
            f"{IfcsApi.IFCS_PREFIX}/devports/",
            params={"node_id": node_id},
            json=body,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_devport_stats_get(
        self, node_id: int, devport: int, stats_ids: List[int] = None
    ) -> IfcsDevportStats:
        r = self.__request(
            "GET",
            f"{IfcsApi.IFCS_PREFIX}/devports/{devport}/stats",
            params={"node_id": node_id},
            json=stats_ids,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        stats = json.loads(r.text)
        logger.info("response: %s", stats)
        return IfcsDevportStats.parse_obj(stats)

    def ifcs_devport_stats_get_bulk(
        self, node_id: int, devports: List[int] = None, stats_ids: List[int] = None
    ) -> List[IfcsDevportStats]:
        body = {}
        if devports is not None:
            body["devports"] = devports
        if stats_ids is not None:
            body["stats_ids"] = stats_ids
        if not body:
            body = None
        r = self.__request(
            "GET",
            f"{IfcsApi.IFCS_PREFIX}/devports/stats",
            params={"node_id": node_id},
            json=body,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        stats_list = json.loads(r.text)
        logger.info("response: %s", stats_list)
        return [IfcsDevportStats.parse_obj(stats) for stats in stats_list]

    def ifcs_devport_stats_detail_get(
        self, node_id: int, devport: int, stats_ids: List[int] = None
    ) -> IfcsDevportStatsDetail:
        r = self.__request(
            "GET",
            f"{IfcsApi.IFCS_PREFIX}/devports/{devport}/statsdetail",
            params={"node_id": node_id},
            json=stats_ids,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        stats = json.loads(r.text)
        logger.info("response: %s", stats)
        return IfcsDevportStatsDetail.parse_obj(stats)

    def ifcs_devport_stats_detail_get_bulk(
        self, node_id: int, devports: List[int] = None, stats_ids: List[int] = None
    ) -> List[IfcsDevportStatsDetail]:
        body = {}
        if devports is not None:
            body["devports"] = devports
        if stats_ids is not None:
            body["stats_ids"] = stats_ids
        if not body:
            body = None
        r = self.__request(
            "GET",
            f"{IfcsApi.IFCS_PREFIX}/devports/statsdetail",
            params={"node_id": node_id},
            json=body,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        stats_list = json.loads(r.text)
        logger.info("response: %s", stats_list)
        return [IfcsDevportStatsDetail.parse_obj(stats) for stats in stats_list]

    def ifcs_devport_stats_clear(
        self, node_id: int, devport: int, stats_ids: List[int] = None
    ) -> None:
        r = self.__request(
            "DELETE",
            f"{IfcsApi.IFCS_PREFIX}/devports/{devport}/stats",
            params={"node_id": node_id},
            json=stats_ids,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_devport_stats_clear_bulk(
        self, node_id: int, devports: List[int] = None, stats_ids: List[int] = None
    ) -> None:
        body = {}
        if devports is not None:
            body["devports"] = devports
        if stats_ids is not None:
            body["stats_ids"] = stats_ids
        if not body:
            body = None
        r = self.__request(
            "DELETE",
            f"{IfcsApi.IFCS_PREFIX}/devports/stats",
            params={"node_id": node_id},
            json=body,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def ifcs_devport_get_all(self, node_id: int) -> List[int]:
        r = self.__request(
            "GET", f"{IfcsApi.IFCS_PREFIX}/devports/devports", params={"node_id": node_id}
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return json.loads(r.text)

    def ifcs_devport_stats_clear_all(self, node_id: int) -> None:
        r = self.__request(
            "DELETE", f"{IfcsApi.IFCS_PREFIX}/devports/stats", params={"node_id": node_id}
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(IfcsError.parse_raw(r.text))
        if r.status_code >= HTTP_BAD_REQUEST:
            r.raise_for_status()
        return None

    def hws_exec(
        self,
        *,
        devNum: int,
        portGroup: int,
        serdesNum: int,
        cmds: List[HwsSerdesCmd],
        exclude_none: Optional[bool] = False,
    ) -> List[HwsSerdesCmdOut]:
        if cmds is None:
            return None
        params = {"devNum": devNum, "portGroup": portGroup}
        if exclude_none:
            params["exclude_none"] = exclude_none
        body = [cmd.dict(exclude_none=True) for cmd in cmds]
        r = self.__request(
            "PATCH",
            f"{IfcsApi.HWS_PREFIX}/serdes/{serdesNum}",
            params=params,
            json=body,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(HwsError.parse_raw(r.text))
        if r.status_code > HTTP_BAD_REQUEST:
            r.raise_for_status()
        outputs = json.loads(r.text)
        if outputs is None:
            return None
        return IfcsApi.__to_cmd_outputs(outputs)

    def hws_exec_bulk(
        self,
        *,
        devNum: int,
        portGroup: int,
        serdesNums: List[int],
        cmds: List[HwsSerdesCmd],
        exclude_none: Optional[bool] = False,
    ) -> List[HwsSerdesCmdOut]:
        if cmds is None:
            return None
        params = {"devNum": devNum, "portGroup": portGroup}
        if exclude_none:
            params["exclude_none"] = exclude_none
        body = {}
        body["cmds"] = [cmd.dict(exclude_none=True) for cmd in cmds]
        if serdesNums is not None:
            if isinstance(serdesNums, list):
                body["serdesNums"] = serdesNums
            elif isinstance(serdesNums, str):
                if serdesNums != "all":
                    raise ValueError("Invalid value specified for serdesNums={serdesNums}. "\
                                     "It should be a list of the serdes numbers or None or \"all\"")
            else:
                raise TypeError("Invalid value specified for serdesNums={serdesNums}. "\
                                     "It should be a list of the serdes numbers or None or \"all\"")
        r = self.__request(
            "PATCH",
            f"{IfcsApi.HWS_PREFIX}/serdes/",
            params=params,
            json=body,
        )
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(HwsError.parse_raw(r.text))
        if r.status_code > HTTP_BAD_REQUEST:
            r.raise_for_status()
        outputs = json.loads(r.text)
        if outputs is None:
            return None
        return IfcsApi.__to_cmd_outputs(outputs)

    def hws_exec_bulk_cmds(
        self, cmds: List[HwsSerdesCmd], exclude_none: Optional[bool] = False
    ) -> List[HwsSerdesCmdOut]:
        if cmds is None or not len(cmds):
            return None
        params = None
        if exclude_none:
            params = {"exclude_none": exclude_none}
        body = [cmd.dict(exclude_none=True) for cmd in cmds]
        r = self.__request("PUT", f"{IfcsApi.HWS_PREFIX}/serdes/", params=params, json=body)
        if r.status_code == HTTP_BAD_REQUEST:
            raise IfcsException(HwsError.parse_raw(r.text))
        if r.status_code > HTTP_BAD_REQUEST:
            r.raise_for_status()
        outputs = json.loads(r.text)
        if outputs is None:
            return None
        return IfcsApi.__to_cmd_outputs(outputs)

    def __request(self, method, endpoint, **kwargs):
        url = f"{self.base_url}{endpoint}"
        headers = {"Content-Type": "application/json"}
        response = self.session.request(method, url, headers=headers, **kwargs)
        return response

    @staticmethod
    def attrs_to_dict(attrs: List[ifcs_attr_t]) -> dict:
        attrd = {}
        for attr in attrs:
            attrd[attr.id] = attr.value
        return attrd

    @staticmethod
    def devport_stats_to_dict(
        devport_stats: Union[List[IfcsDevportStats], List[IfcsDevportStatsDetail]]
    ) -> dict:
        stats_dict = {}
        for id, counter in zip(devport_stats.ids, devport_stats.counters):
            stats_dict[id] = counter
        return stats_dict

    @staticmethod
    def __to_cmd_outputs(outputs: dict) -> List[HwsSerdesCmd]:
        cmd_outputs = []
        for output in outputs:
            cmd_out = parse_obj_as(HwsSerdesCmdOut, output)
            cmd_outputs.append(cmd_out)
        if not cmd_outputs:
            cmd_outputs = None
        return cmd_outputs

    @staticmethod
    def print_req(req):
        print(
            "{}\n{}\r\n{}\r\n\r\n{}".format(
                "-----------START-----------",
                req.method + " " + req.url,
                "\r\n".join("{}: {}".format(k, v) for k, v in req.headers.items()),
                req.body,
            )
        )
